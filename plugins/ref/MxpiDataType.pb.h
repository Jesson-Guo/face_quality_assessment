// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MxpiDataType.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MxpiDataType_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MxpiDataType_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MxpiDataType_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MxpiDataType_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[32]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MxpiDataType_2eproto;
namespace MxTools {
class MxpiAttribute;
class MxpiAttributeDefaultTypeInternal;
extern MxpiAttributeDefaultTypeInternal _MxpiAttribute_default_instance_;
class MxpiAttributeList;
class MxpiAttributeListDefaultTypeInternal;
extern MxpiAttributeListDefaultTypeInternal _MxpiAttributeList_default_instance_;
class MxpiClass;
class MxpiClassDefaultTypeInternal;
extern MxpiClassDefaultTypeInternal _MxpiClass_default_instance_;
class MxpiClassList;
class MxpiClassListDefaultTypeInternal;
extern MxpiClassListDefaultTypeInternal _MxpiClassList_default_instance_;
class MxpiFeatureVector;
class MxpiFeatureVectorDefaultTypeInternal;
extern MxpiFeatureVectorDefaultTypeInternal _MxpiFeatureVector_default_instance_;
class MxpiFeatureVectorList;
class MxpiFeatureVectorListDefaultTypeInternal;
extern MxpiFeatureVectorListDefaultTypeInternal _MxpiFeatureVectorList_default_instance_;
class MxpiFrame;
class MxpiFrameDefaultTypeInternal;
extern MxpiFrameDefaultTypeInternal _MxpiFrame_default_instance_;
class MxpiFrameInfo;
class MxpiFrameInfoDefaultTypeInternal;
extern MxpiFrameInfoDefaultTypeInternal _MxpiFrameInfo_default_instance_;
class MxpiImageMask;
class MxpiImageMaskDefaultTypeInternal;
extern MxpiImageMaskDefaultTypeInternal _MxpiImageMask_default_instance_;
class MxpiImageMaskList;
class MxpiImageMaskListDefaultTypeInternal;
extern MxpiImageMaskListDefaultTypeInternal _MxpiImageMaskList_default_instance_;
class MxpiKeyPoint;
class MxpiKeyPointDefaultTypeInternal;
extern MxpiKeyPointDefaultTypeInternal _MxpiKeyPoint_default_instance_;
class MxpiKeyPointAndAngle;
class MxpiKeyPointAndAngleDefaultTypeInternal;
extern MxpiKeyPointAndAngleDefaultTypeInternal _MxpiKeyPointAndAngle_default_instance_;
class MxpiKeyPointAndAngleList;
class MxpiKeyPointAndAngleListDefaultTypeInternal;
extern MxpiKeyPointAndAngleListDefaultTypeInternal _MxpiKeyPointAndAngleList_default_instance_;
class MxpiMetaHeader;
class MxpiMetaHeaderDefaultTypeInternal;
extern MxpiMetaHeaderDefaultTypeInternal _MxpiMetaHeader_default_instance_;
class MxpiObject;
class MxpiObjectDefaultTypeInternal;
extern MxpiObjectDefaultTypeInternal _MxpiObject_default_instance_;
class MxpiObjectList;
class MxpiObjectListDefaultTypeInternal;
extern MxpiObjectListDefaultTypeInternal _MxpiObjectList_default_instance_;
class MxpiPose;
class MxpiPoseDefaultTypeInternal;
extern MxpiPoseDefaultTypeInternal _MxpiPose_default_instance_;
class MxpiPoseList;
class MxpiPoseListDefaultTypeInternal;
extern MxpiPoseListDefaultTypeInternal _MxpiPoseList_default_instance_;
class MxpiTensor;
class MxpiTensorDefaultTypeInternal;
extern MxpiTensorDefaultTypeInternal _MxpiTensor_default_instance_;
class MxpiTensorPackage;
class MxpiTensorPackageDefaultTypeInternal;
extern MxpiTensorPackageDefaultTypeInternal _MxpiTensorPackage_default_instance_;
class MxpiTensorPackageList;
class MxpiTensorPackageListDefaultTypeInternal;
extern MxpiTensorPackageListDefaultTypeInternal _MxpiTensorPackageList_default_instance_;
class MxpiTextObject;
class MxpiTextObjectDefaultTypeInternal;
extern MxpiTextObjectDefaultTypeInternal _MxpiTextObject_default_instance_;
class MxpiTextObjectList;
class MxpiTextObjectListDefaultTypeInternal;
extern MxpiTextObjectListDefaultTypeInternal _MxpiTextObjectList_default_instance_;
class MxpiTextsInfo;
class MxpiTextsInfoDefaultTypeInternal;
extern MxpiTextsInfoDefaultTypeInternal _MxpiTextsInfo_default_instance_;
class MxpiTextsInfoList;
class MxpiTextsInfoListDefaultTypeInternal;
extern MxpiTextsInfoListDefaultTypeInternal _MxpiTextsInfoList_default_instance_;
class MxpiTrackLet;
class MxpiTrackLetDefaultTypeInternal;
extern MxpiTrackLetDefaultTypeInternal _MxpiTrackLet_default_instance_;
class MxpiTrackLetList;
class MxpiTrackLetListDefaultTypeInternal;
extern MxpiTrackLetListDefaultTypeInternal _MxpiTrackLetList_default_instance_;
class MxpiVision;
class MxpiVisionDefaultTypeInternal;
extern MxpiVisionDefaultTypeInternal _MxpiVision_default_instance_;
class MxpiVisionData;
class MxpiVisionDataDefaultTypeInternal;
extern MxpiVisionDataDefaultTypeInternal _MxpiVisionData_default_instance_;
class MxpiVisionInfo;
class MxpiVisionInfoDefaultTypeInternal;
extern MxpiVisionInfoDefaultTypeInternal _MxpiVisionInfo_default_instance_;
class MxpiVisionList;
class MxpiVisionListDefaultTypeInternal;
extern MxpiVisionListDefaultTypeInternal _MxpiVisionList_default_instance_;
class MxpiVisionPreProcess;
class MxpiVisionPreProcessDefaultTypeInternal;
extern MxpiVisionPreProcessDefaultTypeInternal _MxpiVisionPreProcess_default_instance_;
}  // namespace MxTools
PROTOBUF_NAMESPACE_OPEN
template<> ::MxTools::MxpiAttribute* Arena::CreateMaybeMessage<::MxTools::MxpiAttribute>(Arena*);
template<> ::MxTools::MxpiAttributeList* Arena::CreateMaybeMessage<::MxTools::MxpiAttributeList>(Arena*);
template<> ::MxTools::MxpiClass* Arena::CreateMaybeMessage<::MxTools::MxpiClass>(Arena*);
template<> ::MxTools::MxpiClassList* Arena::CreateMaybeMessage<::MxTools::MxpiClassList>(Arena*);
template<> ::MxTools::MxpiFeatureVector* Arena::CreateMaybeMessage<::MxTools::MxpiFeatureVector>(Arena*);
template<> ::MxTools::MxpiFeatureVectorList* Arena::CreateMaybeMessage<::MxTools::MxpiFeatureVectorList>(Arena*);
template<> ::MxTools::MxpiFrame* Arena::CreateMaybeMessage<::MxTools::MxpiFrame>(Arena*);
template<> ::MxTools::MxpiFrameInfo* Arena::CreateMaybeMessage<::MxTools::MxpiFrameInfo>(Arena*);
template<> ::MxTools::MxpiImageMask* Arena::CreateMaybeMessage<::MxTools::MxpiImageMask>(Arena*);
template<> ::MxTools::MxpiImageMaskList* Arena::CreateMaybeMessage<::MxTools::MxpiImageMaskList>(Arena*);
template<> ::MxTools::MxpiKeyPoint* Arena::CreateMaybeMessage<::MxTools::MxpiKeyPoint>(Arena*);
template<> ::MxTools::MxpiKeyPointAndAngle* Arena::CreateMaybeMessage<::MxTools::MxpiKeyPointAndAngle>(Arena*);
template<> ::MxTools::MxpiKeyPointAndAngleList* Arena::CreateMaybeMessage<::MxTools::MxpiKeyPointAndAngleList>(Arena*);
template<> ::MxTools::MxpiMetaHeader* Arena::CreateMaybeMessage<::MxTools::MxpiMetaHeader>(Arena*);
template<> ::MxTools::MxpiObject* Arena::CreateMaybeMessage<::MxTools::MxpiObject>(Arena*);
template<> ::MxTools::MxpiObjectList* Arena::CreateMaybeMessage<::MxTools::MxpiObjectList>(Arena*);
template<> ::MxTools::MxpiPose* Arena::CreateMaybeMessage<::MxTools::MxpiPose>(Arena*);
template<> ::MxTools::MxpiPoseList* Arena::CreateMaybeMessage<::MxTools::MxpiPoseList>(Arena*);
template<> ::MxTools::MxpiTensor* Arena::CreateMaybeMessage<::MxTools::MxpiTensor>(Arena*);
template<> ::MxTools::MxpiTensorPackage* Arena::CreateMaybeMessage<::MxTools::MxpiTensorPackage>(Arena*);
template<> ::MxTools::MxpiTensorPackageList* Arena::CreateMaybeMessage<::MxTools::MxpiTensorPackageList>(Arena*);
template<> ::MxTools::MxpiTextObject* Arena::CreateMaybeMessage<::MxTools::MxpiTextObject>(Arena*);
template<> ::MxTools::MxpiTextObjectList* Arena::CreateMaybeMessage<::MxTools::MxpiTextObjectList>(Arena*);
template<> ::MxTools::MxpiTextsInfo* Arena::CreateMaybeMessage<::MxTools::MxpiTextsInfo>(Arena*);
template<> ::MxTools::MxpiTextsInfoList* Arena::CreateMaybeMessage<::MxTools::MxpiTextsInfoList>(Arena*);
template<> ::MxTools::MxpiTrackLet* Arena::CreateMaybeMessage<::MxTools::MxpiTrackLet>(Arena*);
template<> ::MxTools::MxpiTrackLetList* Arena::CreateMaybeMessage<::MxTools::MxpiTrackLetList>(Arena*);
template<> ::MxTools::MxpiVision* Arena::CreateMaybeMessage<::MxTools::MxpiVision>(Arena*);
template<> ::MxTools::MxpiVisionData* Arena::CreateMaybeMessage<::MxTools::MxpiVisionData>(Arena*);
template<> ::MxTools::MxpiVisionInfo* Arena::CreateMaybeMessage<::MxTools::MxpiVisionInfo>(Arena*);
template<> ::MxTools::MxpiVisionList* Arena::CreateMaybeMessage<::MxTools::MxpiVisionList>(Arena*);
template<> ::MxTools::MxpiVisionPreProcess* Arena::CreateMaybeMessage<::MxTools::MxpiVisionPreProcess>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace MxTools {

enum MxpiMemoryType : int {
  MXPI_MEMORY_HOST = 0,
  MXPI_MEMORY_DEVICE = 1,
  MXPI_MEMORY_DVPP = 2,
  MXPI_MEMORY_HOST_MALLOC = 3,
  MXPI_MEMORY_HOST_NEW = 4,
  MxpiMemoryType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MxpiMemoryType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MxpiMemoryType_IsValid(int value);
constexpr MxpiMemoryType MxpiMemoryType_MIN = MXPI_MEMORY_HOST;
constexpr MxpiMemoryType MxpiMemoryType_MAX = MXPI_MEMORY_HOST_NEW;
constexpr int MxpiMemoryType_ARRAYSIZE = MxpiMemoryType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MxpiMemoryType_descriptor();
template<typename T>
inline const std::string& MxpiMemoryType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MxpiMemoryType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MxpiMemoryType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MxpiMemoryType_descriptor(), enum_t_value);
}
inline bool MxpiMemoryType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MxpiMemoryType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MxpiMemoryType>(
    MxpiMemoryType_descriptor(), name, value);
}
enum MxpiDataType : int {
  MXPI_DATA_TYPE_UINT8 = 0,
  MXPI_DATA_TYPE_FLOAT32 = 1,
  MxpiDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MxpiDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MxpiDataType_IsValid(int value);
constexpr MxpiDataType MxpiDataType_MIN = MXPI_DATA_TYPE_UINT8;
constexpr MxpiDataType MxpiDataType_MAX = MXPI_DATA_TYPE_FLOAT32;
constexpr int MxpiDataType_ARRAYSIZE = MxpiDataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MxpiDataType_descriptor();
template<typename T>
inline const std::string& MxpiDataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MxpiDataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MxpiDataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MxpiDataType_descriptor(), enum_t_value);
}
inline bool MxpiDataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MxpiDataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MxpiDataType>(
    MxpiDataType_descriptor(), name, value);
}
// ===================================================================

class MxpiFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiFrame) */ {
 public:
  inline MxpiFrame() : MxpiFrame(nullptr) {}
  virtual ~MxpiFrame();

  MxpiFrame(const MxpiFrame& from);
  MxpiFrame(MxpiFrame&& from) noexcept
    : MxpiFrame() {
    *this = ::std::move(from);
  }

  inline MxpiFrame& operator=(const MxpiFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiFrame& operator=(MxpiFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiFrame* internal_default_instance() {
    return reinterpret_cast<const MxpiFrame*>(
               &_MxpiFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MxpiFrame& a, MxpiFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiFrame* New() const final {
    return CreateMaybeMessage<MxpiFrame>(nullptr);
  }

  MxpiFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiFrame& from);
  void MergeFrom(const MxpiFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiFrame";
  }
  protected:
  explicit MxpiFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameInfoFieldNumber = 1,
    kVisionListFieldNumber = 2,
  };
  // .MxTools.MxpiFrameInfo frameInfo = 1;
  bool has_frameinfo() const;
  private:
  bool _internal_has_frameinfo() const;
  public:
  void clear_frameinfo();
  const ::MxTools::MxpiFrameInfo& frameinfo() const;
  ::MxTools::MxpiFrameInfo* release_frameinfo();
  ::MxTools::MxpiFrameInfo* mutable_frameinfo();
  void set_allocated_frameinfo(::MxTools::MxpiFrameInfo* frameinfo);
  private:
  const ::MxTools::MxpiFrameInfo& _internal_frameinfo() const;
  ::MxTools::MxpiFrameInfo* _internal_mutable_frameinfo();
  public:
  void unsafe_arena_set_allocated_frameinfo(
      ::MxTools::MxpiFrameInfo* frameinfo);
  ::MxTools::MxpiFrameInfo* unsafe_arena_release_frameinfo();

  // .MxTools.MxpiVisionList visionList = 2;
  bool has_visionlist() const;
  private:
  bool _internal_has_visionlist() const;
  public:
  void clear_visionlist();
  const ::MxTools::MxpiVisionList& visionlist() const;
  ::MxTools::MxpiVisionList* release_visionlist();
  ::MxTools::MxpiVisionList* mutable_visionlist();
  void set_allocated_visionlist(::MxTools::MxpiVisionList* visionlist);
  private:
  const ::MxTools::MxpiVisionList& _internal_visionlist() const;
  ::MxTools::MxpiVisionList* _internal_mutable_visionlist();
  public:
  void unsafe_arena_set_allocated_visionlist(
      ::MxTools::MxpiVisionList* visionlist);
  ::MxTools::MxpiVisionList* unsafe_arena_release_visionlist();

  // @@protoc_insertion_point(class_scope:MxTools.MxpiFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::MxTools::MxpiFrameInfo* frameinfo_;
  ::MxTools::MxpiVisionList* visionlist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiFrameInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiFrameInfo) */ {
 public:
  inline MxpiFrameInfo() : MxpiFrameInfo(nullptr) {}
  virtual ~MxpiFrameInfo();

  MxpiFrameInfo(const MxpiFrameInfo& from);
  MxpiFrameInfo(MxpiFrameInfo&& from) noexcept
    : MxpiFrameInfo() {
    *this = ::std::move(from);
  }

  inline MxpiFrameInfo& operator=(const MxpiFrameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiFrameInfo& operator=(MxpiFrameInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiFrameInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiFrameInfo* internal_default_instance() {
    return reinterpret_cast<const MxpiFrameInfo*>(
               &_MxpiFrameInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MxpiFrameInfo& a, MxpiFrameInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiFrameInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiFrameInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiFrameInfo* New() const final {
    return CreateMaybeMessage<MxpiFrameInfo>(nullptr);
  }

  MxpiFrameInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiFrameInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiFrameInfo& from);
  void MergeFrom(const MxpiFrameInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiFrameInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiFrameInfo";
  }
  protected:
  explicit MxpiFrameInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kFrameIdFieldNumber = 2,
    kIsEosFieldNumber = 3,
  };
  // uint32 channelId = 1;
  void clear_channelid();
  ::PROTOBUF_NAMESPACE_ID::uint32 channelid() const;
  void set_channelid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channelid() const;
  void _internal_set_channelid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 frameId = 2;
  void clear_frameid();
  ::PROTOBUF_NAMESPACE_ID::uint32 frameid() const;
  void set_frameid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frameid() const;
  void _internal_set_frameid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool isEos = 3;
  void clear_iseos();
  bool iseos() const;
  void set_iseos(bool value);
  private:
  bool _internal_iseos() const;
  void _internal_set_iseos(bool value);
  public:

  // @@protoc_insertion_point(class_scope:MxTools.MxpiFrameInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channelid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frameid_;
  bool iseos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiVisionList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiVisionList) */ {
 public:
  inline MxpiVisionList() : MxpiVisionList(nullptr) {}
  virtual ~MxpiVisionList();

  MxpiVisionList(const MxpiVisionList& from);
  MxpiVisionList(MxpiVisionList&& from) noexcept
    : MxpiVisionList() {
    *this = ::std::move(from);
  }

  inline MxpiVisionList& operator=(const MxpiVisionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiVisionList& operator=(MxpiVisionList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiVisionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiVisionList* internal_default_instance() {
    return reinterpret_cast<const MxpiVisionList*>(
               &_MxpiVisionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MxpiVisionList& a, MxpiVisionList& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiVisionList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiVisionList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiVisionList* New() const final {
    return CreateMaybeMessage<MxpiVisionList>(nullptr);
  }

  MxpiVisionList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiVisionList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiVisionList& from);
  void MergeFrom(const MxpiVisionList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiVisionList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiVisionList";
  }
  protected:
  explicit MxpiVisionList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisionVecFieldNumber = 1,
  };
  // repeated .MxTools.MxpiVision visionVec = 1;
  int visionvec_size() const;
  private:
  int _internal_visionvec_size() const;
  public:
  void clear_visionvec();
  ::MxTools::MxpiVision* mutable_visionvec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiVision >*
      mutable_visionvec();
  private:
  const ::MxTools::MxpiVision& _internal_visionvec(int index) const;
  ::MxTools::MxpiVision* _internal_add_visionvec();
  public:
  const ::MxTools::MxpiVision& visionvec(int index) const;
  ::MxTools::MxpiVision* add_visionvec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiVision >&
      visionvec() const;

  // @@protoc_insertion_point(class_scope:MxTools.MxpiVisionList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiVision > visionvec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiVision PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiVision) */ {
 public:
  inline MxpiVision() : MxpiVision(nullptr) {}
  virtual ~MxpiVision();

  MxpiVision(const MxpiVision& from);
  MxpiVision(MxpiVision&& from) noexcept
    : MxpiVision() {
    *this = ::std::move(from);
  }

  inline MxpiVision& operator=(const MxpiVision& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiVision& operator=(MxpiVision&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiVision& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiVision* internal_default_instance() {
    return reinterpret_cast<const MxpiVision*>(
               &_MxpiVision_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MxpiVision& a, MxpiVision& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiVision* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiVision* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiVision* New() const final {
    return CreateMaybeMessage<MxpiVision>(nullptr);
  }

  MxpiVision* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiVision>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiVision& from);
  void MergeFrom(const MxpiVision& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiVision* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiVision";
  }
  protected:
  explicit MxpiVision(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderVecFieldNumber = 1,
    kVisionInfoFieldNumber = 2,
    kVisionDataFieldNumber = 3,
  };
  // repeated .MxTools.MxpiMetaHeader headerVec = 1;
  int headervec_size() const;
  private:
  int _internal_headervec_size() const;
  public:
  void clear_headervec();
  ::MxTools::MxpiMetaHeader* mutable_headervec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >*
      mutable_headervec();
  private:
  const ::MxTools::MxpiMetaHeader& _internal_headervec(int index) const;
  ::MxTools::MxpiMetaHeader* _internal_add_headervec();
  public:
  const ::MxTools::MxpiMetaHeader& headervec(int index) const;
  ::MxTools::MxpiMetaHeader* add_headervec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >&
      headervec() const;

  // .MxTools.MxpiVisionInfo visionInfo = 2;
  bool has_visioninfo() const;
  private:
  bool _internal_has_visioninfo() const;
  public:
  void clear_visioninfo();
  const ::MxTools::MxpiVisionInfo& visioninfo() const;
  ::MxTools::MxpiVisionInfo* release_visioninfo();
  ::MxTools::MxpiVisionInfo* mutable_visioninfo();
  void set_allocated_visioninfo(::MxTools::MxpiVisionInfo* visioninfo);
  private:
  const ::MxTools::MxpiVisionInfo& _internal_visioninfo() const;
  ::MxTools::MxpiVisionInfo* _internal_mutable_visioninfo();
  public:
  void unsafe_arena_set_allocated_visioninfo(
      ::MxTools::MxpiVisionInfo* visioninfo);
  ::MxTools::MxpiVisionInfo* unsafe_arena_release_visioninfo();

  // .MxTools.MxpiVisionData visionData = 3;
  bool has_visiondata() const;
  private:
  bool _internal_has_visiondata() const;
  public:
  void clear_visiondata();
  const ::MxTools::MxpiVisionData& visiondata() const;
  ::MxTools::MxpiVisionData* release_visiondata();
  ::MxTools::MxpiVisionData* mutable_visiondata();
  void set_allocated_visiondata(::MxTools::MxpiVisionData* visiondata);
  private:
  const ::MxTools::MxpiVisionData& _internal_visiondata() const;
  ::MxTools::MxpiVisionData* _internal_mutable_visiondata();
  public:
  void unsafe_arena_set_allocated_visiondata(
      ::MxTools::MxpiVisionData* visiondata);
  ::MxTools::MxpiVisionData* unsafe_arena_release_visiondata();

  // @@protoc_insertion_point(class_scope:MxTools.MxpiVision)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader > headervec_;
  ::MxTools::MxpiVisionInfo* visioninfo_;
  ::MxTools::MxpiVisionData* visiondata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiMetaHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiMetaHeader) */ {
 public:
  inline MxpiMetaHeader() : MxpiMetaHeader(nullptr) {}
  virtual ~MxpiMetaHeader();

  MxpiMetaHeader(const MxpiMetaHeader& from);
  MxpiMetaHeader(MxpiMetaHeader&& from) noexcept
    : MxpiMetaHeader() {
    *this = ::std::move(from);
  }

  inline MxpiMetaHeader& operator=(const MxpiMetaHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiMetaHeader& operator=(MxpiMetaHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiMetaHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiMetaHeader* internal_default_instance() {
    return reinterpret_cast<const MxpiMetaHeader*>(
               &_MxpiMetaHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MxpiMetaHeader& a, MxpiMetaHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiMetaHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiMetaHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiMetaHeader* New() const final {
    return CreateMaybeMessage<MxpiMetaHeader>(nullptr);
  }

  MxpiMetaHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiMetaHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiMetaHeader& from);
  void MergeFrom(const MxpiMetaHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiMetaHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiMetaHeader";
  }
  protected:
  explicit MxpiMetaHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentNameFieldNumber = 1,
    kDataSourceFieldNumber = 3,
    kMemberIdFieldNumber = 2,
  };
  // string parentName = 1;
  void clear_parentname();
  const std::string& parentname() const;
  void set_parentname(const std::string& value);
  void set_parentname(std::string&& value);
  void set_parentname(const char* value);
  void set_parentname(const char* value, size_t size);
  std::string* mutable_parentname();
  std::string* release_parentname();
  void set_allocated_parentname(std::string* parentname);
  private:
  const std::string& _internal_parentname() const;
  void _internal_set_parentname(const std::string& value);
  std::string* _internal_mutable_parentname();
  public:

  // string dataSource = 3;
  void clear_datasource();
  const std::string& datasource() const;
  void set_datasource(const std::string& value);
  void set_datasource(std::string&& value);
  void set_datasource(const char* value);
  void set_datasource(const char* value, size_t size);
  std::string* mutable_datasource();
  std::string* release_datasource();
  void set_allocated_datasource(std::string* datasource);
  private:
  const std::string& _internal_datasource() const;
  void _internal_set_datasource(const std::string& value);
  std::string* _internal_mutable_datasource();
  public:

  // int32 memberId = 2;
  void clear_memberid();
  ::PROTOBUF_NAMESPACE_ID::int32 memberid() const;
  void set_memberid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_memberid() const;
  void _internal_set_memberid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MxTools.MxpiMetaHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parentname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasource_;
  ::PROTOBUF_NAMESPACE_ID::int32 memberid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiVisionInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiVisionInfo) */ {
 public:
  inline MxpiVisionInfo() : MxpiVisionInfo(nullptr) {}
  virtual ~MxpiVisionInfo();

  MxpiVisionInfo(const MxpiVisionInfo& from);
  MxpiVisionInfo(MxpiVisionInfo&& from) noexcept
    : MxpiVisionInfo() {
    *this = ::std::move(from);
  }

  inline MxpiVisionInfo& operator=(const MxpiVisionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiVisionInfo& operator=(MxpiVisionInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiVisionInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiVisionInfo* internal_default_instance() {
    return reinterpret_cast<const MxpiVisionInfo*>(
               &_MxpiVisionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MxpiVisionInfo& a, MxpiVisionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiVisionInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiVisionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiVisionInfo* New() const final {
    return CreateMaybeMessage<MxpiVisionInfo>(nullptr);
  }

  MxpiVisionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiVisionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiVisionInfo& from);
  void MergeFrom(const MxpiVisionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiVisionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiVisionInfo";
  }
  protected:
  explicit MxpiVisionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreprocessInfoFieldNumber = 8,
    kFormatFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kWidthAlignedFieldNumber = 4,
    kHeightAlignedFieldNumber = 5,
    kResizeTypeFieldNumber = 6,
    kKeepAspectRatioScalingFieldNumber = 7,
  };
  // repeated .MxTools.MxpiVisionPreProcess preprocessInfo = 8;
  int preprocessinfo_size() const;
  private:
  int _internal_preprocessinfo_size() const;
  public:
  void clear_preprocessinfo();
  ::MxTools::MxpiVisionPreProcess* mutable_preprocessinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiVisionPreProcess >*
      mutable_preprocessinfo();
  private:
  const ::MxTools::MxpiVisionPreProcess& _internal_preprocessinfo(int index) const;
  ::MxTools::MxpiVisionPreProcess* _internal_add_preprocessinfo();
  public:
  const ::MxTools::MxpiVisionPreProcess& preprocessinfo(int index) const;
  ::MxTools::MxpiVisionPreProcess* add_preprocessinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiVisionPreProcess >&
      preprocessinfo() const;

  // uint32 format = 1;
  void clear_format();
  ::PROTOBUF_NAMESPACE_ID::uint32 format() const;
  void set_format(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_format() const;
  void _internal_set_format(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 widthAligned = 4;
  void clear_widthaligned();
  ::PROTOBUF_NAMESPACE_ID::uint32 widthaligned() const;
  void set_widthaligned(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_widthaligned() const;
  void _internal_set_widthaligned(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 heightAligned = 5;
  void clear_heightaligned();
  ::PROTOBUF_NAMESPACE_ID::uint32 heightaligned() const;
  void set_heightaligned(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heightaligned() const;
  void _internal_set_heightaligned(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 resizeType = 6;
  void clear_resizetype();
  ::PROTOBUF_NAMESPACE_ID::uint32 resizetype() const;
  void set_resizetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_resizetype() const;
  void _internal_set_resizetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float keepAspectRatioScaling = 7;
  void clear_keepaspectratioscaling();
  float keepaspectratioscaling() const;
  void set_keepaspectratioscaling(float value);
  private:
  float _internal_keepaspectratioscaling() const;
  void _internal_set_keepaspectratioscaling(float value);
  public:

  // @@protoc_insertion_point(class_scope:MxTools.MxpiVisionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiVisionPreProcess > preprocessinfo_;
  ::PROTOBUF_NAMESPACE_ID::uint32 format_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 widthaligned_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heightaligned_;
  ::PROTOBUF_NAMESPACE_ID::uint32 resizetype_;
  float keepaspectratioscaling_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiVisionPreProcess PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiVisionPreProcess) */ {
 public:
  inline MxpiVisionPreProcess() : MxpiVisionPreProcess(nullptr) {}
  virtual ~MxpiVisionPreProcess();

  MxpiVisionPreProcess(const MxpiVisionPreProcess& from);
  MxpiVisionPreProcess(MxpiVisionPreProcess&& from) noexcept
    : MxpiVisionPreProcess() {
    *this = ::std::move(from);
  }

  inline MxpiVisionPreProcess& operator=(const MxpiVisionPreProcess& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiVisionPreProcess& operator=(MxpiVisionPreProcess&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiVisionPreProcess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiVisionPreProcess* internal_default_instance() {
    return reinterpret_cast<const MxpiVisionPreProcess*>(
               &_MxpiVisionPreProcess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MxpiVisionPreProcess& a, MxpiVisionPreProcess& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiVisionPreProcess* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiVisionPreProcess* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiVisionPreProcess* New() const final {
    return CreateMaybeMessage<MxpiVisionPreProcess>(nullptr);
  }

  MxpiVisionPreProcess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiVisionPreProcess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiVisionPreProcess& from);
  void MergeFrom(const MxpiVisionPreProcess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiVisionPreProcess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiVisionPreProcess";
  }
  protected:
  explicit MxpiVisionPreProcess(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementNameFieldNumber = 12,
    kWidthSrcFieldNumber = 1,
    kHeightSrcFieldNumber = 2,
    kCropLeftFieldNumber = 3,
    kCropRightFieldNumber = 4,
    kCropTopFieldNumber = 5,
    kCropBottomFieldNumber = 6,
    kPasteLeftFieldNumber = 7,
    kPasteRightFieldNumber = 8,
    kPasteTopFieldNumber = 9,
    kPasteBottomFieldNumber = 10,
    kInterpolationFieldNumber = 11,
  };
  // string elementName = 12;
  void clear_elementname();
  const std::string& elementname() const;
  void set_elementname(const std::string& value);
  void set_elementname(std::string&& value);
  void set_elementname(const char* value);
  void set_elementname(const char* value, size_t size);
  std::string* mutable_elementname();
  std::string* release_elementname();
  void set_allocated_elementname(std::string* elementname);
  private:
  const std::string& _internal_elementname() const;
  void _internal_set_elementname(const std::string& value);
  std::string* _internal_mutable_elementname();
  public:

  // uint32 widthSrc = 1;
  void clear_widthsrc();
  ::PROTOBUF_NAMESPACE_ID::uint32 widthsrc() const;
  void set_widthsrc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_widthsrc() const;
  void _internal_set_widthsrc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 heightSrc = 2;
  void clear_heightsrc();
  ::PROTOBUF_NAMESPACE_ID::uint32 heightsrc() const;
  void set_heightsrc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heightsrc() const;
  void _internal_set_heightsrc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cropLeft = 3;
  void clear_cropleft();
  ::PROTOBUF_NAMESPACE_ID::uint32 cropleft() const;
  void set_cropleft(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cropleft() const;
  void _internal_set_cropleft(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cropRight = 4;
  void clear_cropright();
  ::PROTOBUF_NAMESPACE_ID::uint32 cropright() const;
  void set_cropright(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cropright() const;
  void _internal_set_cropright(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cropTop = 5;
  void clear_croptop();
  ::PROTOBUF_NAMESPACE_ID::uint32 croptop() const;
  void set_croptop(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_croptop() const;
  void _internal_set_croptop(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cropBottom = 6;
  void clear_cropbottom();
  ::PROTOBUF_NAMESPACE_ID::uint32 cropbottom() const;
  void set_cropbottom(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cropbottom() const;
  void _internal_set_cropbottom(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pasteLeft = 7;
  void clear_pasteleft();
  ::PROTOBUF_NAMESPACE_ID::uint32 pasteleft() const;
  void set_pasteleft(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pasteleft() const;
  void _internal_set_pasteleft(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pasteRight = 8;
  void clear_pasteright();
  ::PROTOBUF_NAMESPACE_ID::uint32 pasteright() const;
  void set_pasteright(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pasteright() const;
  void _internal_set_pasteright(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pasteTop = 9;
  void clear_pastetop();
  ::PROTOBUF_NAMESPACE_ID::uint32 pastetop() const;
  void set_pastetop(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pastetop() const;
  void _internal_set_pastetop(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pasteBottom = 10;
  void clear_pastebottom();
  ::PROTOBUF_NAMESPACE_ID::uint32 pastebottom() const;
  void set_pastebottom(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pastebottom() const;
  void _internal_set_pastebottom(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 interpolation = 11;
  void clear_interpolation();
  ::PROTOBUF_NAMESPACE_ID::uint32 interpolation() const;
  void set_interpolation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_interpolation() const;
  void _internal_set_interpolation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:MxTools.MxpiVisionPreProcess)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr elementname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 widthsrc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heightsrc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cropleft_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cropright_;
  ::PROTOBUF_NAMESPACE_ID::uint32 croptop_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cropbottom_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pasteleft_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pasteright_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pastetop_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pastebottom_;
  ::PROTOBUF_NAMESPACE_ID::uint32 interpolation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiVisionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiVisionData) */ {
 public:
  inline MxpiVisionData() : MxpiVisionData(nullptr) {}
  virtual ~MxpiVisionData();

  MxpiVisionData(const MxpiVisionData& from);
  MxpiVisionData(MxpiVisionData&& from) noexcept
    : MxpiVisionData() {
    *this = ::std::move(from);
  }

  inline MxpiVisionData& operator=(const MxpiVisionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiVisionData& operator=(MxpiVisionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiVisionData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiVisionData* internal_default_instance() {
    return reinterpret_cast<const MxpiVisionData*>(
               &_MxpiVisionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MxpiVisionData& a, MxpiVisionData& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiVisionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiVisionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiVisionData* New() const final {
    return CreateMaybeMessage<MxpiVisionData>(nullptr);
  }

  MxpiVisionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiVisionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiVisionData& from);
  void MergeFrom(const MxpiVisionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiVisionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiVisionData";
  }
  protected:
  explicit MxpiVisionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataStrFieldNumber = 6,
    kDataPtrFieldNumber = 1,
    kDataSizeFieldNumber = 2,
    kDeviceIdFieldNumber = 3,
    kFreeFuncFieldNumber = 5,
    kMemTypeFieldNumber = 4,
    kDataTypeFieldNumber = 7,
    kMatPtrFieldNumber = 8,
  };
  // bytes dataStr = 6;
  void clear_datastr();
  const std::string& datastr() const;
  void set_datastr(const std::string& value);
  void set_datastr(std::string&& value);
  void set_datastr(const char* value);
  void set_datastr(const void* value, size_t size);
  std::string* mutable_datastr();
  std::string* release_datastr();
  void set_allocated_datastr(std::string* datastr);
  private:
  const std::string& _internal_datastr() const;
  void _internal_set_datastr(const std::string& value);
  std::string* _internal_mutable_datastr();
  public:

  // uint64 dataPtr = 1;
  void clear_dataptr();
  ::PROTOBUF_NAMESPACE_ID::uint64 dataptr() const;
  void set_dataptr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dataptr() const;
  void _internal_set_dataptr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 dataSize = 2;
  void clear_datasize();
  ::PROTOBUF_NAMESPACE_ID::int32 datasize() const;
  void set_datasize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_datasize() const;
  void _internal_set_datasize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 deviceId = 3;
  void clear_deviceid();
  ::PROTOBUF_NAMESPACE_ID::uint32 deviceid() const;
  void set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deviceid() const;
  void _internal_set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 freeFunc = 5;
  void clear_freefunc();
  ::PROTOBUF_NAMESPACE_ID::uint64 freefunc() const;
  void set_freefunc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_freefunc() const;
  void _internal_set_freefunc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .MxTools.MxpiMemoryType memType = 4;
  void clear_memtype();
  ::MxTools::MxpiMemoryType memtype() const;
  void set_memtype(::MxTools::MxpiMemoryType value);
  private:
  ::MxTools::MxpiMemoryType _internal_memtype() const;
  void _internal_set_memtype(::MxTools::MxpiMemoryType value);
  public:

  // .MxTools.MxpiDataType dataType = 7;
  void clear_datatype();
  ::MxTools::MxpiDataType datatype() const;
  void set_datatype(::MxTools::MxpiDataType value);
  private:
  ::MxTools::MxpiDataType _internal_datatype() const;
  void _internal_set_datatype(::MxTools::MxpiDataType value);
  public:

  // uint64 matPtr = 8;
  void clear_matptr();
  ::PROTOBUF_NAMESPACE_ID::uint64 matptr() const;
  void set_matptr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_matptr() const;
  void _internal_set_matptr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:MxTools.MxpiVisionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datastr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dataptr_;
  ::PROTOBUF_NAMESPACE_ID::int32 datasize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deviceid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 freefunc_;
  int memtype_;
  int datatype_;
  ::PROTOBUF_NAMESPACE_ID::uint64 matptr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiObjectList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiObjectList) */ {
 public:
  inline MxpiObjectList() : MxpiObjectList(nullptr) {}
  virtual ~MxpiObjectList();

  MxpiObjectList(const MxpiObjectList& from);
  MxpiObjectList(MxpiObjectList&& from) noexcept
    : MxpiObjectList() {
    *this = ::std::move(from);
  }

  inline MxpiObjectList& operator=(const MxpiObjectList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiObjectList& operator=(MxpiObjectList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiObjectList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiObjectList* internal_default_instance() {
    return reinterpret_cast<const MxpiObjectList*>(
               &_MxpiObjectList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MxpiObjectList& a, MxpiObjectList& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiObjectList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiObjectList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiObjectList* New() const final {
    return CreateMaybeMessage<MxpiObjectList>(nullptr);
  }

  MxpiObjectList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiObjectList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiObjectList& from);
  void MergeFrom(const MxpiObjectList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiObjectList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiObjectList";
  }
  protected:
  explicit MxpiObjectList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectVecFieldNumber = 1,
  };
  // repeated .MxTools.MxpiObject objectVec = 1;
  int objectvec_size() const;
  private:
  int _internal_objectvec_size() const;
  public:
  void clear_objectvec();
  ::MxTools::MxpiObject* mutable_objectvec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiObject >*
      mutable_objectvec();
  private:
  const ::MxTools::MxpiObject& _internal_objectvec(int index) const;
  ::MxTools::MxpiObject* _internal_add_objectvec();
  public:
  const ::MxTools::MxpiObject& objectvec(int index) const;
  ::MxTools::MxpiObject* add_objectvec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiObject >&
      objectvec() const;

  // @@protoc_insertion_point(class_scope:MxTools.MxpiObjectList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiObject > objectvec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiObject) */ {
 public:
  inline MxpiObject() : MxpiObject(nullptr) {}
  virtual ~MxpiObject();

  MxpiObject(const MxpiObject& from);
  MxpiObject(MxpiObject&& from) noexcept
    : MxpiObject() {
    *this = ::std::move(from);
  }

  inline MxpiObject& operator=(const MxpiObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiObject& operator=(MxpiObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiObject* internal_default_instance() {
    return reinterpret_cast<const MxpiObject*>(
               &_MxpiObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MxpiObject& a, MxpiObject& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiObject* New() const final {
    return CreateMaybeMessage<MxpiObject>(nullptr);
  }

  MxpiObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiObject& from);
  void MergeFrom(const MxpiObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiObject";
  }
  protected:
  explicit MxpiObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderVecFieldNumber = 1,
    kClassVecFieldNumber = 6,
    kImageMaskFieldNumber = 7,
    kX0FieldNumber = 2,
    kY0FieldNumber = 3,
    kX1FieldNumber = 4,
    kY1FieldNumber = 5,
  };
  // repeated .MxTools.MxpiMetaHeader headerVec = 1;
  int headervec_size() const;
  private:
  int _internal_headervec_size() const;
  public:
  void clear_headervec();
  ::MxTools::MxpiMetaHeader* mutable_headervec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >*
      mutable_headervec();
  private:
  const ::MxTools::MxpiMetaHeader& _internal_headervec(int index) const;
  ::MxTools::MxpiMetaHeader* _internal_add_headervec();
  public:
  const ::MxTools::MxpiMetaHeader& headervec(int index) const;
  ::MxTools::MxpiMetaHeader* add_headervec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >&
      headervec() const;

  // repeated .MxTools.MxpiClass classVec = 6;
  int classvec_size() const;
  private:
  int _internal_classvec_size() const;
  public:
  void clear_classvec();
  ::MxTools::MxpiClass* mutable_classvec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiClass >*
      mutable_classvec();
  private:
  const ::MxTools::MxpiClass& _internal_classvec(int index) const;
  ::MxTools::MxpiClass* _internal_add_classvec();
  public:
  const ::MxTools::MxpiClass& classvec(int index) const;
  ::MxTools::MxpiClass* add_classvec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiClass >&
      classvec() const;

  // .MxTools.MxpiImageMask imageMask = 7;
  bool has_imagemask() const;
  private:
  bool _internal_has_imagemask() const;
  public:
  void clear_imagemask();
  const ::MxTools::MxpiImageMask& imagemask() const;
  ::MxTools::MxpiImageMask* release_imagemask();
  ::MxTools::MxpiImageMask* mutable_imagemask();
  void set_allocated_imagemask(::MxTools::MxpiImageMask* imagemask);
  private:
  const ::MxTools::MxpiImageMask& _internal_imagemask() const;
  ::MxTools::MxpiImageMask* _internal_mutable_imagemask();
  public:
  void unsafe_arena_set_allocated_imagemask(
      ::MxTools::MxpiImageMask* imagemask);
  ::MxTools::MxpiImageMask* unsafe_arena_release_imagemask();

  // float x0 = 2;
  void clear_x0();
  float x0() const;
  void set_x0(float value);
  private:
  float _internal_x0() const;
  void _internal_set_x0(float value);
  public:

  // float y0 = 3;
  void clear_y0();
  float y0() const;
  void set_y0(float value);
  private:
  float _internal_y0() const;
  void _internal_set_y0(float value);
  public:

  // float x1 = 4;
  void clear_x1();
  float x1() const;
  void set_x1(float value);
  private:
  float _internal_x1() const;
  void _internal_set_x1(float value);
  public:

  // float y1 = 5;
  void clear_y1();
  float y1() const;
  void set_y1(float value);
  private:
  float _internal_y1() const;
  void _internal_set_y1(float value);
  public:

  // @@protoc_insertion_point(class_scope:MxTools.MxpiObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader > headervec_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiClass > classvec_;
  ::MxTools::MxpiImageMask* imagemask_;
  float x0_;
  float y0_;
  float x1_;
  float y1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiImageMaskList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiImageMaskList) */ {
 public:
  inline MxpiImageMaskList() : MxpiImageMaskList(nullptr) {}
  virtual ~MxpiImageMaskList();

  MxpiImageMaskList(const MxpiImageMaskList& from);
  MxpiImageMaskList(MxpiImageMaskList&& from) noexcept
    : MxpiImageMaskList() {
    *this = ::std::move(from);
  }

  inline MxpiImageMaskList& operator=(const MxpiImageMaskList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiImageMaskList& operator=(MxpiImageMaskList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiImageMaskList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiImageMaskList* internal_default_instance() {
    return reinterpret_cast<const MxpiImageMaskList*>(
               &_MxpiImageMaskList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MxpiImageMaskList& a, MxpiImageMaskList& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiImageMaskList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiImageMaskList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiImageMaskList* New() const final {
    return CreateMaybeMessage<MxpiImageMaskList>(nullptr);
  }

  MxpiImageMaskList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiImageMaskList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiImageMaskList& from);
  void MergeFrom(const MxpiImageMaskList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiImageMaskList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiImageMaskList";
  }
  protected:
  explicit MxpiImageMaskList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageMaskVecFieldNumber = 1,
  };
  // repeated .MxTools.MxpiImageMask imageMaskVec = 1;
  int imagemaskvec_size() const;
  private:
  int _internal_imagemaskvec_size() const;
  public:
  void clear_imagemaskvec();
  ::MxTools::MxpiImageMask* mutable_imagemaskvec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiImageMask >*
      mutable_imagemaskvec();
  private:
  const ::MxTools::MxpiImageMask& _internal_imagemaskvec(int index) const;
  ::MxTools::MxpiImageMask* _internal_add_imagemaskvec();
  public:
  const ::MxTools::MxpiImageMask& imagemaskvec(int index) const;
  ::MxTools::MxpiImageMask* add_imagemaskvec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiImageMask >&
      imagemaskvec() const;

  // @@protoc_insertion_point(class_scope:MxTools.MxpiImageMaskList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiImageMask > imagemaskvec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiImageMask PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiImageMask) */ {
 public:
  inline MxpiImageMask() : MxpiImageMask(nullptr) {}
  virtual ~MxpiImageMask();

  MxpiImageMask(const MxpiImageMask& from);
  MxpiImageMask(MxpiImageMask&& from) noexcept
    : MxpiImageMask() {
    *this = ::std::move(from);
  }

  inline MxpiImageMask& operator=(const MxpiImageMask& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiImageMask& operator=(MxpiImageMask&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiImageMask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiImageMask* internal_default_instance() {
    return reinterpret_cast<const MxpiImageMask*>(
               &_MxpiImageMask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MxpiImageMask& a, MxpiImageMask& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiImageMask* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiImageMask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiImageMask* New() const final {
    return CreateMaybeMessage<MxpiImageMask>(nullptr);
  }

  MxpiImageMask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiImageMask>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiImageMask& from);
  void MergeFrom(const MxpiImageMask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiImageMask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiImageMask";
  }
  protected:
  explicit MxpiImageMask(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderVecFieldNumber = 1,
    kClassNameFieldNumber = 2,
    kShapeFieldNumber = 3,
    kDataStrFieldNumber = 5,
    kDataTypeFieldNumber = 4,
  };
  // repeated .MxTools.MxpiMetaHeader headerVec = 1;
  int headervec_size() const;
  private:
  int _internal_headervec_size() const;
  public:
  void clear_headervec();
  ::MxTools::MxpiMetaHeader* mutable_headervec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >*
      mutable_headervec();
  private:
  const ::MxTools::MxpiMetaHeader& _internal_headervec(int index) const;
  ::MxTools::MxpiMetaHeader* _internal_add_headervec();
  public:
  const ::MxTools::MxpiMetaHeader& headervec(int index) const;
  ::MxTools::MxpiMetaHeader* add_headervec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >&
      headervec() const;

  // repeated string className = 2;
  int classname_size() const;
  private:
  int _internal_classname_size() const;
  public:
  void clear_classname();
  const std::string& classname(int index) const;
  std::string* mutable_classname(int index);
  void set_classname(int index, const std::string& value);
  void set_classname(int index, std::string&& value);
  void set_classname(int index, const char* value);
  void set_classname(int index, const char* value, size_t size);
  std::string* add_classname();
  void add_classname(const std::string& value);
  void add_classname(std::string&& value);
  void add_classname(const char* value);
  void add_classname(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& classname() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_classname();
  private:
  const std::string& _internal_classname(int index) const;
  std::string* _internal_add_classname();
  public:

  // repeated int32 shape = 3;
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_shape() const;
  void _internal_add_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 shape(int index) const;
  void set_shape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_shape();

  // bytes dataStr = 5;
  void clear_datastr();
  const std::string& datastr() const;
  void set_datastr(const std::string& value);
  void set_datastr(std::string&& value);
  void set_datastr(const char* value);
  void set_datastr(const void* value, size_t size);
  std::string* mutable_datastr();
  std::string* release_datastr();
  void set_allocated_datastr(std::string* datastr);
  private:
  const std::string& _internal_datastr() const;
  void _internal_set_datastr(const std::string& value);
  std::string* _internal_mutable_datastr();
  public:

  // int32 dataType = 4;
  void clear_datatype();
  ::PROTOBUF_NAMESPACE_ID::int32 datatype() const;
  void set_datatype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_datatype() const;
  void _internal_set_datatype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MxTools.MxpiImageMask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader > headervec_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> classname_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > shape_;
  mutable std::atomic<int> _shape_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datastr_;
  ::PROTOBUF_NAMESPACE_ID::int32 datatype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiClass PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiClass) */ {
 public:
  inline MxpiClass() : MxpiClass(nullptr) {}
  virtual ~MxpiClass();

  MxpiClass(const MxpiClass& from);
  MxpiClass(MxpiClass&& from) noexcept
    : MxpiClass() {
    *this = ::std::move(from);
  }

  inline MxpiClass& operator=(const MxpiClass& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiClass& operator=(MxpiClass&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiClass& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiClass* internal_default_instance() {
    return reinterpret_cast<const MxpiClass*>(
               &_MxpiClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MxpiClass& a, MxpiClass& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiClass* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiClass* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiClass* New() const final {
    return CreateMaybeMessage<MxpiClass>(nullptr);
  }

  MxpiClass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiClass>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiClass& from);
  void MergeFrom(const MxpiClass& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiClass* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiClass";
  }
  protected:
  explicit MxpiClass(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderVecFieldNumber = 1,
    kClassNameFieldNumber = 3,
    kClassIdFieldNumber = 2,
    kConfidenceFieldNumber = 4,
  };
  // repeated .MxTools.MxpiMetaHeader headerVec = 1;
  int headervec_size() const;
  private:
  int _internal_headervec_size() const;
  public:
  void clear_headervec();
  ::MxTools::MxpiMetaHeader* mutable_headervec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >*
      mutable_headervec();
  private:
  const ::MxTools::MxpiMetaHeader& _internal_headervec(int index) const;
  ::MxTools::MxpiMetaHeader* _internal_add_headervec();
  public:
  const ::MxTools::MxpiMetaHeader& headervec(int index) const;
  ::MxTools::MxpiMetaHeader* add_headervec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >&
      headervec() const;

  // string className = 3;
  void clear_classname();
  const std::string& classname() const;
  void set_classname(const std::string& value);
  void set_classname(std::string&& value);
  void set_classname(const char* value);
  void set_classname(const char* value, size_t size);
  std::string* mutable_classname();
  std::string* release_classname();
  void set_allocated_classname(std::string* classname);
  private:
  const std::string& _internal_classname() const;
  void _internal_set_classname(const std::string& value);
  std::string* _internal_mutable_classname();
  public:

  // int32 classId = 2;
  void clear_classid();
  ::PROTOBUF_NAMESPACE_ID::int32 classid() const;
  void set_classid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_classid() const;
  void _internal_set_classid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float confidence = 4;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:MxTools.MxpiClass)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader > headervec_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr classname_;
  ::PROTOBUF_NAMESPACE_ID::int32 classid_;
  float confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiClassList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiClassList) */ {
 public:
  inline MxpiClassList() : MxpiClassList(nullptr) {}
  virtual ~MxpiClassList();

  MxpiClassList(const MxpiClassList& from);
  MxpiClassList(MxpiClassList&& from) noexcept
    : MxpiClassList() {
    *this = ::std::move(from);
  }

  inline MxpiClassList& operator=(const MxpiClassList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiClassList& operator=(MxpiClassList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiClassList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiClassList* internal_default_instance() {
    return reinterpret_cast<const MxpiClassList*>(
               &_MxpiClassList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MxpiClassList& a, MxpiClassList& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiClassList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiClassList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiClassList* New() const final {
    return CreateMaybeMessage<MxpiClassList>(nullptr);
  }

  MxpiClassList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiClassList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiClassList& from);
  void MergeFrom(const MxpiClassList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiClassList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiClassList";
  }
  protected:
  explicit MxpiClassList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassVecFieldNumber = 1,
  };
  // repeated .MxTools.MxpiClass classVec = 1;
  int classvec_size() const;
  private:
  int _internal_classvec_size() const;
  public:
  void clear_classvec();
  ::MxTools::MxpiClass* mutable_classvec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiClass >*
      mutable_classvec();
  private:
  const ::MxTools::MxpiClass& _internal_classvec(int index) const;
  ::MxTools::MxpiClass* _internal_add_classvec();
  public:
  const ::MxTools::MxpiClass& classvec(int index) const;
  ::MxTools::MxpiClass* add_classvec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiClass >&
      classvec() const;

  // @@protoc_insertion_point(class_scope:MxTools.MxpiClassList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiClass > classvec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiAttributeList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiAttributeList) */ {
 public:
  inline MxpiAttributeList() : MxpiAttributeList(nullptr) {}
  virtual ~MxpiAttributeList();

  MxpiAttributeList(const MxpiAttributeList& from);
  MxpiAttributeList(MxpiAttributeList&& from) noexcept
    : MxpiAttributeList() {
    *this = ::std::move(from);
  }

  inline MxpiAttributeList& operator=(const MxpiAttributeList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiAttributeList& operator=(MxpiAttributeList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiAttributeList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiAttributeList* internal_default_instance() {
    return reinterpret_cast<const MxpiAttributeList*>(
               &_MxpiAttributeList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MxpiAttributeList& a, MxpiAttributeList& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiAttributeList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiAttributeList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiAttributeList* New() const final {
    return CreateMaybeMessage<MxpiAttributeList>(nullptr);
  }

  MxpiAttributeList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiAttributeList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiAttributeList& from);
  void MergeFrom(const MxpiAttributeList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiAttributeList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiAttributeList";
  }
  protected:
  explicit MxpiAttributeList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttributeVecFieldNumber = 1,
  };
  // repeated .MxTools.MxpiAttribute attributeVec = 1;
  int attributevec_size() const;
  private:
  int _internal_attributevec_size() const;
  public:
  void clear_attributevec();
  ::MxTools::MxpiAttribute* mutable_attributevec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiAttribute >*
      mutable_attributevec();
  private:
  const ::MxTools::MxpiAttribute& _internal_attributevec(int index) const;
  ::MxTools::MxpiAttribute* _internal_add_attributevec();
  public:
  const ::MxTools::MxpiAttribute& attributevec(int index) const;
  ::MxTools::MxpiAttribute* add_attributevec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiAttribute >&
      attributevec() const;

  // @@protoc_insertion_point(class_scope:MxTools.MxpiAttributeList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiAttribute > attributevec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiAttribute PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiAttribute) */ {
 public:
  inline MxpiAttribute() : MxpiAttribute(nullptr) {}
  virtual ~MxpiAttribute();

  MxpiAttribute(const MxpiAttribute& from);
  MxpiAttribute(MxpiAttribute&& from) noexcept
    : MxpiAttribute() {
    *this = ::std::move(from);
  }

  inline MxpiAttribute& operator=(const MxpiAttribute& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiAttribute& operator=(MxpiAttribute&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiAttribute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiAttribute* internal_default_instance() {
    return reinterpret_cast<const MxpiAttribute*>(
               &_MxpiAttribute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MxpiAttribute& a, MxpiAttribute& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiAttribute* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiAttribute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiAttribute* New() const final {
    return CreateMaybeMessage<MxpiAttribute>(nullptr);
  }

  MxpiAttribute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiAttribute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiAttribute& from);
  void MergeFrom(const MxpiAttribute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiAttribute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiAttribute";
  }
  protected:
  explicit MxpiAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderVecFieldNumber = 1,
    kAttrNameFieldNumber = 3,
    kAttrValueFieldNumber = 4,
    kAttrIdFieldNumber = 2,
    kConfidenceFieldNumber = 5,
  };
  // repeated .MxTools.MxpiMetaHeader headerVec = 1;
  int headervec_size() const;
  private:
  int _internal_headervec_size() const;
  public:
  void clear_headervec();
  ::MxTools::MxpiMetaHeader* mutable_headervec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >*
      mutable_headervec();
  private:
  const ::MxTools::MxpiMetaHeader& _internal_headervec(int index) const;
  ::MxTools::MxpiMetaHeader* _internal_add_headervec();
  public:
  const ::MxTools::MxpiMetaHeader& headervec(int index) const;
  ::MxTools::MxpiMetaHeader* add_headervec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >&
      headervec() const;

  // string attrName = 3;
  void clear_attrname();
  const std::string& attrname() const;
  void set_attrname(const std::string& value);
  void set_attrname(std::string&& value);
  void set_attrname(const char* value);
  void set_attrname(const char* value, size_t size);
  std::string* mutable_attrname();
  std::string* release_attrname();
  void set_allocated_attrname(std::string* attrname);
  private:
  const std::string& _internal_attrname() const;
  void _internal_set_attrname(const std::string& value);
  std::string* _internal_mutable_attrname();
  public:

  // string attrValue = 4;
  void clear_attrvalue();
  const std::string& attrvalue() const;
  void set_attrvalue(const std::string& value);
  void set_attrvalue(std::string&& value);
  void set_attrvalue(const char* value);
  void set_attrvalue(const char* value, size_t size);
  std::string* mutable_attrvalue();
  std::string* release_attrvalue();
  void set_allocated_attrvalue(std::string* attrvalue);
  private:
  const std::string& _internal_attrvalue() const;
  void _internal_set_attrvalue(const std::string& value);
  std::string* _internal_mutable_attrvalue();
  public:

  // int32 attrId = 2;
  void clear_attrid();
  ::PROTOBUF_NAMESPACE_ID::int32 attrid() const;
  void set_attrid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_attrid() const;
  void _internal_set_attrid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float confidence = 5;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:MxTools.MxpiAttribute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader > headervec_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attrname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attrvalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 attrid_;
  float confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiTrackLetList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiTrackLetList) */ {
 public:
  inline MxpiTrackLetList() : MxpiTrackLetList(nullptr) {}
  virtual ~MxpiTrackLetList();

  MxpiTrackLetList(const MxpiTrackLetList& from);
  MxpiTrackLetList(MxpiTrackLetList&& from) noexcept
    : MxpiTrackLetList() {
    *this = ::std::move(from);
  }

  inline MxpiTrackLetList& operator=(const MxpiTrackLetList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiTrackLetList& operator=(MxpiTrackLetList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiTrackLetList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiTrackLetList* internal_default_instance() {
    return reinterpret_cast<const MxpiTrackLetList*>(
               &_MxpiTrackLetList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MxpiTrackLetList& a, MxpiTrackLetList& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiTrackLetList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiTrackLetList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiTrackLetList* New() const final {
    return CreateMaybeMessage<MxpiTrackLetList>(nullptr);
  }

  MxpiTrackLetList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiTrackLetList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiTrackLetList& from);
  void MergeFrom(const MxpiTrackLetList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiTrackLetList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiTrackLetList";
  }
  protected:
  explicit MxpiTrackLetList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackLetVecFieldNumber = 1,
  };
  // repeated .MxTools.MxpiTrackLet trackLetVec = 1;
  int trackletvec_size() const;
  private:
  int _internal_trackletvec_size() const;
  public:
  void clear_trackletvec();
  ::MxTools::MxpiTrackLet* mutable_trackletvec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiTrackLet >*
      mutable_trackletvec();
  private:
  const ::MxTools::MxpiTrackLet& _internal_trackletvec(int index) const;
  ::MxTools::MxpiTrackLet* _internal_add_trackletvec();
  public:
  const ::MxTools::MxpiTrackLet& trackletvec(int index) const;
  ::MxTools::MxpiTrackLet* add_trackletvec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiTrackLet >&
      trackletvec() const;

  // @@protoc_insertion_point(class_scope:MxTools.MxpiTrackLetList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiTrackLet > trackletvec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiTrackLet PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiTrackLet) */ {
 public:
  inline MxpiTrackLet() : MxpiTrackLet(nullptr) {}
  virtual ~MxpiTrackLet();

  MxpiTrackLet(const MxpiTrackLet& from);
  MxpiTrackLet(MxpiTrackLet&& from) noexcept
    : MxpiTrackLet() {
    *this = ::std::move(from);
  }

  inline MxpiTrackLet& operator=(const MxpiTrackLet& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiTrackLet& operator=(MxpiTrackLet&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiTrackLet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiTrackLet* internal_default_instance() {
    return reinterpret_cast<const MxpiTrackLet*>(
               &_MxpiTrackLet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MxpiTrackLet& a, MxpiTrackLet& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiTrackLet* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiTrackLet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiTrackLet* New() const final {
    return CreateMaybeMessage<MxpiTrackLet>(nullptr);
  }

  MxpiTrackLet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiTrackLet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiTrackLet& from);
  void MergeFrom(const MxpiTrackLet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiTrackLet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiTrackLet";
  }
  protected:
  explicit MxpiTrackLet(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderVecFieldNumber = 1,
    kTrackIdFieldNumber = 2,
    kAgeFieldNumber = 3,
    kHitsFieldNumber = 4,
    kTrackFlagFieldNumber = 5,
  };
  // repeated .MxTools.MxpiMetaHeader headerVec = 1;
  int headervec_size() const;
  private:
  int _internal_headervec_size() const;
  public:
  void clear_headervec();
  ::MxTools::MxpiMetaHeader* mutable_headervec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >*
      mutable_headervec();
  private:
  const ::MxTools::MxpiMetaHeader& _internal_headervec(int index) const;
  ::MxTools::MxpiMetaHeader* _internal_add_headervec();
  public:
  const ::MxTools::MxpiMetaHeader& headervec(int index) const;
  ::MxTools::MxpiMetaHeader* add_headervec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >&
      headervec() const;

  // uint32 trackId = 2;
  void clear_trackid();
  ::PROTOBUF_NAMESPACE_ID::uint32 trackid() const;
  void set_trackid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_trackid() const;
  void _internal_set_trackid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 age = 3;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::uint32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hits = 4;
  void clear_hits();
  ::PROTOBUF_NAMESPACE_ID::uint32 hits() const;
  void set_hits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hits() const;
  void _internal_set_hits(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 trackFlag = 5;
  void clear_trackflag();
  ::PROTOBUF_NAMESPACE_ID::int32 trackflag() const;
  void set_trackflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_trackflag() const;
  void _internal_set_trackflag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MxTools.MxpiTrackLet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader > headervec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trackid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 age_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hits_;
  ::PROTOBUF_NAMESPACE_ID::int32 trackflag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiTensorPackageList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiTensorPackageList) */ {
 public:
  inline MxpiTensorPackageList() : MxpiTensorPackageList(nullptr) {}
  virtual ~MxpiTensorPackageList();

  MxpiTensorPackageList(const MxpiTensorPackageList& from);
  MxpiTensorPackageList(MxpiTensorPackageList&& from) noexcept
    : MxpiTensorPackageList() {
    *this = ::std::move(from);
  }

  inline MxpiTensorPackageList& operator=(const MxpiTensorPackageList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiTensorPackageList& operator=(MxpiTensorPackageList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiTensorPackageList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiTensorPackageList* internal_default_instance() {
    return reinterpret_cast<const MxpiTensorPackageList*>(
               &_MxpiTensorPackageList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MxpiTensorPackageList& a, MxpiTensorPackageList& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiTensorPackageList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiTensorPackageList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiTensorPackageList* New() const final {
    return CreateMaybeMessage<MxpiTensorPackageList>(nullptr);
  }

  MxpiTensorPackageList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiTensorPackageList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiTensorPackageList& from);
  void MergeFrom(const MxpiTensorPackageList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiTensorPackageList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiTensorPackageList";
  }
  protected:
  explicit MxpiTensorPackageList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTensorPackageVecFieldNumber = 1,
  };
  // repeated .MxTools.MxpiTensorPackage tensorPackageVec = 1;
  int tensorpackagevec_size() const;
  private:
  int _internal_tensorpackagevec_size() const;
  public:
  void clear_tensorpackagevec();
  ::MxTools::MxpiTensorPackage* mutable_tensorpackagevec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiTensorPackage >*
      mutable_tensorpackagevec();
  private:
  const ::MxTools::MxpiTensorPackage& _internal_tensorpackagevec(int index) const;
  ::MxTools::MxpiTensorPackage* _internal_add_tensorpackagevec();
  public:
  const ::MxTools::MxpiTensorPackage& tensorpackagevec(int index) const;
  ::MxTools::MxpiTensorPackage* add_tensorpackagevec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiTensorPackage >&
      tensorpackagevec() const;

  // @@protoc_insertion_point(class_scope:MxTools.MxpiTensorPackageList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiTensorPackage > tensorpackagevec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiTensorPackage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiTensorPackage) */ {
 public:
  inline MxpiTensorPackage() : MxpiTensorPackage(nullptr) {}
  virtual ~MxpiTensorPackage();

  MxpiTensorPackage(const MxpiTensorPackage& from);
  MxpiTensorPackage(MxpiTensorPackage&& from) noexcept
    : MxpiTensorPackage() {
    *this = ::std::move(from);
  }

  inline MxpiTensorPackage& operator=(const MxpiTensorPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiTensorPackage& operator=(MxpiTensorPackage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiTensorPackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiTensorPackage* internal_default_instance() {
    return reinterpret_cast<const MxpiTensorPackage*>(
               &_MxpiTensorPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MxpiTensorPackage& a, MxpiTensorPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiTensorPackage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiTensorPackage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiTensorPackage* New() const final {
    return CreateMaybeMessage<MxpiTensorPackage>(nullptr);
  }

  MxpiTensorPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiTensorPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiTensorPackage& from);
  void MergeFrom(const MxpiTensorPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiTensorPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiTensorPackage";
  }
  protected:
  explicit MxpiTensorPackage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderVecFieldNumber = 1,
    kTensorVecFieldNumber = 2,
  };
  // repeated .MxTools.MxpiMetaHeader headerVec = 1;
  int headervec_size() const;
  private:
  int _internal_headervec_size() const;
  public:
  void clear_headervec();
  ::MxTools::MxpiMetaHeader* mutable_headervec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >*
      mutable_headervec();
  private:
  const ::MxTools::MxpiMetaHeader& _internal_headervec(int index) const;
  ::MxTools::MxpiMetaHeader* _internal_add_headervec();
  public:
  const ::MxTools::MxpiMetaHeader& headervec(int index) const;
  ::MxTools::MxpiMetaHeader* add_headervec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >&
      headervec() const;

  // repeated .MxTools.MxpiTensor tensorVec = 2;
  int tensorvec_size() const;
  private:
  int _internal_tensorvec_size() const;
  public:
  void clear_tensorvec();
  ::MxTools::MxpiTensor* mutable_tensorvec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiTensor >*
      mutable_tensorvec();
  private:
  const ::MxTools::MxpiTensor& _internal_tensorvec(int index) const;
  ::MxTools::MxpiTensor* _internal_add_tensorvec();
  public:
  const ::MxTools::MxpiTensor& tensorvec(int index) const;
  ::MxTools::MxpiTensor* add_tensorvec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiTensor >&
      tensorvec() const;

  // @@protoc_insertion_point(class_scope:MxTools.MxpiTensorPackage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader > headervec_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiTensor > tensorvec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiTensor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiTensor) */ {
 public:
  inline MxpiTensor() : MxpiTensor(nullptr) {}
  virtual ~MxpiTensor();

  MxpiTensor(const MxpiTensor& from);
  MxpiTensor(MxpiTensor&& from) noexcept
    : MxpiTensor() {
    *this = ::std::move(from);
  }

  inline MxpiTensor& operator=(const MxpiTensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiTensor& operator=(MxpiTensor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiTensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiTensor* internal_default_instance() {
    return reinterpret_cast<const MxpiTensor*>(
               &_MxpiTensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(MxpiTensor& a, MxpiTensor& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiTensor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiTensor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiTensor* New() const final {
    return CreateMaybeMessage<MxpiTensor>(nullptr);
  }

  MxpiTensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiTensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiTensor& from);
  void MergeFrom(const MxpiTensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiTensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiTensor";
  }
  protected:
  explicit MxpiTensor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTensorShapeFieldNumber = 6,
    kDataStrFieldNumber = 7,
    kTensorDataPtrFieldNumber = 1,
    kTensorDataSizeFieldNumber = 2,
    kDeviceIdFieldNumber = 3,
    kFreeFuncFieldNumber = 5,
    kMemTypeFieldNumber = 4,
    kTensorDataTypeFieldNumber = 8,
  };
  // repeated int32 tensorShape = 6;
  int tensorshape_size() const;
  private:
  int _internal_tensorshape_size() const;
  public:
  void clear_tensorshape();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tensorshape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_tensorshape() const;
  void _internal_add_tensorshape(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_tensorshape();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 tensorshape(int index) const;
  void set_tensorshape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_tensorshape(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      tensorshape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_tensorshape();

  // bytes dataStr = 7;
  void clear_datastr();
  const std::string& datastr() const;
  void set_datastr(const std::string& value);
  void set_datastr(std::string&& value);
  void set_datastr(const char* value);
  void set_datastr(const void* value, size_t size);
  std::string* mutable_datastr();
  std::string* release_datastr();
  void set_allocated_datastr(std::string* datastr);
  private:
  const std::string& _internal_datastr() const;
  void _internal_set_datastr(const std::string& value);
  std::string* _internal_mutable_datastr();
  public:

  // uint64 tensorDataPtr = 1;
  void clear_tensordataptr();
  ::PROTOBUF_NAMESPACE_ID::uint64 tensordataptr() const;
  void set_tensordataptr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tensordataptr() const;
  void _internal_set_tensordataptr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 tensorDataSize = 2;
  void clear_tensordatasize();
  ::PROTOBUF_NAMESPACE_ID::int32 tensordatasize() const;
  void set_tensordatasize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tensordatasize() const;
  void _internal_set_tensordatasize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 deviceId = 3;
  void clear_deviceid();
  ::PROTOBUF_NAMESPACE_ID::uint32 deviceid() const;
  void set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deviceid() const;
  void _internal_set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 freeFunc = 5;
  void clear_freefunc();
  ::PROTOBUF_NAMESPACE_ID::uint64 freefunc() const;
  void set_freefunc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_freefunc() const;
  void _internal_set_freefunc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .MxTools.MxpiMemoryType memType = 4;
  void clear_memtype();
  ::MxTools::MxpiMemoryType memtype() const;
  void set_memtype(::MxTools::MxpiMemoryType value);
  private:
  ::MxTools::MxpiMemoryType _internal_memtype() const;
  void _internal_set_memtype(::MxTools::MxpiMemoryType value);
  public:

  // int32 tensorDataType = 8;
  void clear_tensordatatype();
  ::PROTOBUF_NAMESPACE_ID::int32 tensordatatype() const;
  void set_tensordatatype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tensordatatype() const;
  void _internal_set_tensordatatype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:MxTools.MxpiTensor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > tensorshape_;
  mutable std::atomic<int> _tensorshape_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datastr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tensordataptr_;
  ::PROTOBUF_NAMESPACE_ID::int32 tensordatasize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deviceid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 freefunc_;
  int memtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 tensordatatype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiFeatureVectorList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiFeatureVectorList) */ {
 public:
  inline MxpiFeatureVectorList() : MxpiFeatureVectorList(nullptr) {}
  virtual ~MxpiFeatureVectorList();

  MxpiFeatureVectorList(const MxpiFeatureVectorList& from);
  MxpiFeatureVectorList(MxpiFeatureVectorList&& from) noexcept
    : MxpiFeatureVectorList() {
    *this = ::std::move(from);
  }

  inline MxpiFeatureVectorList& operator=(const MxpiFeatureVectorList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiFeatureVectorList& operator=(MxpiFeatureVectorList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiFeatureVectorList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiFeatureVectorList* internal_default_instance() {
    return reinterpret_cast<const MxpiFeatureVectorList*>(
               &_MxpiFeatureVectorList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(MxpiFeatureVectorList& a, MxpiFeatureVectorList& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiFeatureVectorList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiFeatureVectorList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiFeatureVectorList* New() const final {
    return CreateMaybeMessage<MxpiFeatureVectorList>(nullptr);
  }

  MxpiFeatureVectorList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiFeatureVectorList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiFeatureVectorList& from);
  void MergeFrom(const MxpiFeatureVectorList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiFeatureVectorList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiFeatureVectorList";
  }
  protected:
  explicit MxpiFeatureVectorList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureVecFieldNumber = 1,
  };
  // repeated .MxTools.MxpiFeatureVector featureVec = 1;
  int featurevec_size() const;
  private:
  int _internal_featurevec_size() const;
  public:
  void clear_featurevec();
  ::MxTools::MxpiFeatureVector* mutable_featurevec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiFeatureVector >*
      mutable_featurevec();
  private:
  const ::MxTools::MxpiFeatureVector& _internal_featurevec(int index) const;
  ::MxTools::MxpiFeatureVector* _internal_add_featurevec();
  public:
  const ::MxTools::MxpiFeatureVector& featurevec(int index) const;
  ::MxTools::MxpiFeatureVector* add_featurevec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiFeatureVector >&
      featurevec() const;

  // @@protoc_insertion_point(class_scope:MxTools.MxpiFeatureVectorList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiFeatureVector > featurevec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiFeatureVector PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiFeatureVector) */ {
 public:
  inline MxpiFeatureVector() : MxpiFeatureVector(nullptr) {}
  virtual ~MxpiFeatureVector();

  MxpiFeatureVector(const MxpiFeatureVector& from);
  MxpiFeatureVector(MxpiFeatureVector&& from) noexcept
    : MxpiFeatureVector() {
    *this = ::std::move(from);
  }

  inline MxpiFeatureVector& operator=(const MxpiFeatureVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiFeatureVector& operator=(MxpiFeatureVector&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiFeatureVector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiFeatureVector* internal_default_instance() {
    return reinterpret_cast<const MxpiFeatureVector*>(
               &_MxpiFeatureVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(MxpiFeatureVector& a, MxpiFeatureVector& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiFeatureVector* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiFeatureVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiFeatureVector* New() const final {
    return CreateMaybeMessage<MxpiFeatureVector>(nullptr);
  }

  MxpiFeatureVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiFeatureVector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiFeatureVector& from);
  void MergeFrom(const MxpiFeatureVector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiFeatureVector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiFeatureVector";
  }
  protected:
  explicit MxpiFeatureVector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderVecFieldNumber = 1,
    kFeatureValuesFieldNumber = 2,
  };
  // repeated .MxTools.MxpiMetaHeader headerVec = 1;
  int headervec_size() const;
  private:
  int _internal_headervec_size() const;
  public:
  void clear_headervec();
  ::MxTools::MxpiMetaHeader* mutable_headervec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >*
      mutable_headervec();
  private:
  const ::MxTools::MxpiMetaHeader& _internal_headervec(int index) const;
  ::MxTools::MxpiMetaHeader* _internal_add_headervec();
  public:
  const ::MxTools::MxpiMetaHeader& headervec(int index) const;
  ::MxTools::MxpiMetaHeader* add_headervec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >&
      headervec() const;

  // repeated float featureValues = 2;
  int featurevalues_size() const;
  private:
  int _internal_featurevalues_size() const;
  public:
  void clear_featurevalues();
  private:
  float _internal_featurevalues(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_featurevalues() const;
  void _internal_add_featurevalues(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_featurevalues();
  public:
  float featurevalues(int index) const;
  void set_featurevalues(int index, float value);
  void add_featurevalues(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      featurevalues() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_featurevalues();

  // @@protoc_insertion_point(class_scope:MxTools.MxpiFeatureVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader > headervec_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > featurevalues_;
  mutable std::atomic<int> _featurevalues_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiPoseList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiPoseList) */ {
 public:
  inline MxpiPoseList() : MxpiPoseList(nullptr) {}
  virtual ~MxpiPoseList();

  MxpiPoseList(const MxpiPoseList& from);
  MxpiPoseList(MxpiPoseList&& from) noexcept
    : MxpiPoseList() {
    *this = ::std::move(from);
  }

  inline MxpiPoseList& operator=(const MxpiPoseList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiPoseList& operator=(MxpiPoseList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiPoseList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiPoseList* internal_default_instance() {
    return reinterpret_cast<const MxpiPoseList*>(
               &_MxpiPoseList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(MxpiPoseList& a, MxpiPoseList& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiPoseList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiPoseList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiPoseList* New() const final {
    return CreateMaybeMessage<MxpiPoseList>(nullptr);
  }

  MxpiPoseList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiPoseList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiPoseList& from);
  void MergeFrom(const MxpiPoseList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiPoseList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiPoseList";
  }
  protected:
  explicit MxpiPoseList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseVecFieldNumber = 1,
  };
  // repeated .MxTools.MxpiPose poseVec = 1;
  int posevec_size() const;
  private:
  int _internal_posevec_size() const;
  public:
  void clear_posevec();
  ::MxTools::MxpiPose* mutable_posevec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiPose >*
      mutable_posevec();
  private:
  const ::MxTools::MxpiPose& _internal_posevec(int index) const;
  ::MxTools::MxpiPose* _internal_add_posevec();
  public:
  const ::MxTools::MxpiPose& posevec(int index) const;
  ::MxTools::MxpiPose* add_posevec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiPose >&
      posevec() const;

  // @@protoc_insertion_point(class_scope:MxTools.MxpiPoseList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiPose > posevec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiPose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiPose) */ {
 public:
  inline MxpiPose() : MxpiPose(nullptr) {}
  virtual ~MxpiPose();

  MxpiPose(const MxpiPose& from);
  MxpiPose(MxpiPose&& from) noexcept
    : MxpiPose() {
    *this = ::std::move(from);
  }

  inline MxpiPose& operator=(const MxpiPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiPose& operator=(MxpiPose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiPose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiPose* internal_default_instance() {
    return reinterpret_cast<const MxpiPose*>(
               &_MxpiPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(MxpiPose& a, MxpiPose& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiPose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiPose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiPose* New() const final {
    return CreateMaybeMessage<MxpiPose>(nullptr);
  }

  MxpiPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiPose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiPose& from);
  void MergeFrom(const MxpiPose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiPose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiPose";
  }
  protected:
  explicit MxpiPose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderVecFieldNumber = 1,
    kKeyPointVecFieldNumber = 2,
    kScoreFieldNumber = 3,
  };
  // repeated .MxTools.MxpiMetaHeader headerVec = 1;
  int headervec_size() const;
  private:
  int _internal_headervec_size() const;
  public:
  void clear_headervec();
  ::MxTools::MxpiMetaHeader* mutable_headervec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >*
      mutable_headervec();
  private:
  const ::MxTools::MxpiMetaHeader& _internal_headervec(int index) const;
  ::MxTools::MxpiMetaHeader* _internal_add_headervec();
  public:
  const ::MxTools::MxpiMetaHeader& headervec(int index) const;
  ::MxTools::MxpiMetaHeader* add_headervec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >&
      headervec() const;

  // repeated .MxTools.MxpiKeyPoint keyPointVec = 2;
  int keypointvec_size() const;
  private:
  int _internal_keypointvec_size() const;
  public:
  void clear_keypointvec();
  ::MxTools::MxpiKeyPoint* mutable_keypointvec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiKeyPoint >*
      mutable_keypointvec();
  private:
  const ::MxTools::MxpiKeyPoint& _internal_keypointvec(int index) const;
  ::MxTools::MxpiKeyPoint* _internal_add_keypointvec();
  public:
  const ::MxTools::MxpiKeyPoint& keypointvec(int index) const;
  ::MxTools::MxpiKeyPoint* add_keypointvec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiKeyPoint >&
      keypointvec() const;

  // float score = 3;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:MxTools.MxpiPose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader > headervec_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiKeyPoint > keypointvec_;
  float score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiKeyPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiKeyPoint) */ {
 public:
  inline MxpiKeyPoint() : MxpiKeyPoint(nullptr) {}
  virtual ~MxpiKeyPoint();

  MxpiKeyPoint(const MxpiKeyPoint& from);
  MxpiKeyPoint(MxpiKeyPoint&& from) noexcept
    : MxpiKeyPoint() {
    *this = ::std::move(from);
  }

  inline MxpiKeyPoint& operator=(const MxpiKeyPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiKeyPoint& operator=(MxpiKeyPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiKeyPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiKeyPoint* internal_default_instance() {
    return reinterpret_cast<const MxpiKeyPoint*>(
               &_MxpiKeyPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(MxpiKeyPoint& a, MxpiKeyPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiKeyPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiKeyPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiKeyPoint* New() const final {
    return CreateMaybeMessage<MxpiKeyPoint>(nullptr);
  }

  MxpiKeyPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiKeyPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiKeyPoint& from);
  void MergeFrom(const MxpiKeyPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiKeyPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiKeyPoint";
  }
  protected:
  explicit MxpiKeyPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kNameFieldNumber = 3,
    kScoreFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // int32 name = 3;
  void clear_name();
  ::PROTOBUF_NAMESPACE_ID::int32 name() const;
  void set_name(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_name() const;
  void _internal_set_name(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float score = 4;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:MxTools.MxpiKeyPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  ::PROTOBUF_NAMESPACE_ID::int32 name_;
  float score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiKeyPointAndAngleList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiKeyPointAndAngleList) */ {
 public:
  inline MxpiKeyPointAndAngleList() : MxpiKeyPointAndAngleList(nullptr) {}
  virtual ~MxpiKeyPointAndAngleList();

  MxpiKeyPointAndAngleList(const MxpiKeyPointAndAngleList& from);
  MxpiKeyPointAndAngleList(MxpiKeyPointAndAngleList&& from) noexcept
    : MxpiKeyPointAndAngleList() {
    *this = ::std::move(from);
  }

  inline MxpiKeyPointAndAngleList& operator=(const MxpiKeyPointAndAngleList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiKeyPointAndAngleList& operator=(MxpiKeyPointAndAngleList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiKeyPointAndAngleList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiKeyPointAndAngleList* internal_default_instance() {
    return reinterpret_cast<const MxpiKeyPointAndAngleList*>(
               &_MxpiKeyPointAndAngleList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(MxpiKeyPointAndAngleList& a, MxpiKeyPointAndAngleList& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiKeyPointAndAngleList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiKeyPointAndAngleList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiKeyPointAndAngleList* New() const final {
    return CreateMaybeMessage<MxpiKeyPointAndAngleList>(nullptr);
  }

  MxpiKeyPointAndAngleList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiKeyPointAndAngleList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiKeyPointAndAngleList& from);
  void MergeFrom(const MxpiKeyPointAndAngleList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiKeyPointAndAngleList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiKeyPointAndAngleList";
  }
  protected:
  explicit MxpiKeyPointAndAngleList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyPointAndAngleVecFieldNumber = 1,
  };
  // repeated .MxTools.MxpiKeyPointAndAngle keyPointAndAngleVec = 1;
  int keypointandanglevec_size() const;
  private:
  int _internal_keypointandanglevec_size() const;
  public:
  void clear_keypointandanglevec();
  ::MxTools::MxpiKeyPointAndAngle* mutable_keypointandanglevec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiKeyPointAndAngle >*
      mutable_keypointandanglevec();
  private:
  const ::MxTools::MxpiKeyPointAndAngle& _internal_keypointandanglevec(int index) const;
  ::MxTools::MxpiKeyPointAndAngle* _internal_add_keypointandanglevec();
  public:
  const ::MxTools::MxpiKeyPointAndAngle& keypointandanglevec(int index) const;
  ::MxTools::MxpiKeyPointAndAngle* add_keypointandanglevec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiKeyPointAndAngle >&
      keypointandanglevec() const;

  // @@protoc_insertion_point(class_scope:MxTools.MxpiKeyPointAndAngleList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiKeyPointAndAngle > keypointandanglevec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiKeyPointAndAngle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiKeyPointAndAngle) */ {
 public:
  inline MxpiKeyPointAndAngle() : MxpiKeyPointAndAngle(nullptr) {}
  virtual ~MxpiKeyPointAndAngle();

  MxpiKeyPointAndAngle(const MxpiKeyPointAndAngle& from);
  MxpiKeyPointAndAngle(MxpiKeyPointAndAngle&& from) noexcept
    : MxpiKeyPointAndAngle() {
    *this = ::std::move(from);
  }

  inline MxpiKeyPointAndAngle& operator=(const MxpiKeyPointAndAngle& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiKeyPointAndAngle& operator=(MxpiKeyPointAndAngle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiKeyPointAndAngle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiKeyPointAndAngle* internal_default_instance() {
    return reinterpret_cast<const MxpiKeyPointAndAngle*>(
               &_MxpiKeyPointAndAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(MxpiKeyPointAndAngle& a, MxpiKeyPointAndAngle& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiKeyPointAndAngle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiKeyPointAndAngle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiKeyPointAndAngle* New() const final {
    return CreateMaybeMessage<MxpiKeyPointAndAngle>(nullptr);
  }

  MxpiKeyPointAndAngle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiKeyPointAndAngle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiKeyPointAndAngle& from);
  void MergeFrom(const MxpiKeyPointAndAngle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiKeyPointAndAngle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiKeyPointAndAngle";
  }
  protected:
  explicit MxpiKeyPointAndAngle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderVecFieldNumber = 1,
    kKeyPointsVecFieldNumber = 2,
    kAngleYawFieldNumber = 3,
    kAnglePitchFieldNumber = 4,
    kAngleRollFieldNumber = 5,
  };
  // repeated .MxTools.MxpiMetaHeader headerVec = 1;
  int headervec_size() const;
  private:
  int _internal_headervec_size() const;
  public:
  void clear_headervec();
  ::MxTools::MxpiMetaHeader* mutable_headervec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >*
      mutable_headervec();
  private:
  const ::MxTools::MxpiMetaHeader& _internal_headervec(int index) const;
  ::MxTools::MxpiMetaHeader* _internal_add_headervec();
  public:
  const ::MxTools::MxpiMetaHeader& headervec(int index) const;
  ::MxTools::MxpiMetaHeader* add_headervec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >&
      headervec() const;

  // repeated float keyPointsVec = 2;
  int keypointsvec_size() const;
  private:
  int _internal_keypointsvec_size() const;
  public:
  void clear_keypointsvec();
  private:
  float _internal_keypointsvec(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_keypointsvec() const;
  void _internal_add_keypointsvec(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_keypointsvec();
  public:
  float keypointsvec(int index) const;
  void set_keypointsvec(int index, float value);
  void add_keypointsvec(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      keypointsvec() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_keypointsvec();

  // float angleYaw = 3;
  void clear_angleyaw();
  float angleyaw() const;
  void set_angleyaw(float value);
  private:
  float _internal_angleyaw() const;
  void _internal_set_angleyaw(float value);
  public:

  // float anglePitch = 4;
  void clear_anglepitch();
  float anglepitch() const;
  void set_anglepitch(float value);
  private:
  float _internal_anglepitch() const;
  void _internal_set_anglepitch(float value);
  public:

  // float angleRoll = 5;
  void clear_angleroll();
  float angleroll() const;
  void set_angleroll(float value);
  private:
  float _internal_angleroll() const;
  void _internal_set_angleroll(float value);
  public:

  // @@protoc_insertion_point(class_scope:MxTools.MxpiKeyPointAndAngle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader > headervec_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > keypointsvec_;
  mutable std::atomic<int> _keypointsvec_cached_byte_size_;
  float angleyaw_;
  float anglepitch_;
  float angleroll_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiTextObjectList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiTextObjectList) */ {
 public:
  inline MxpiTextObjectList() : MxpiTextObjectList(nullptr) {}
  virtual ~MxpiTextObjectList();

  MxpiTextObjectList(const MxpiTextObjectList& from);
  MxpiTextObjectList(MxpiTextObjectList&& from) noexcept
    : MxpiTextObjectList() {
    *this = ::std::move(from);
  }

  inline MxpiTextObjectList& operator=(const MxpiTextObjectList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiTextObjectList& operator=(MxpiTextObjectList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiTextObjectList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiTextObjectList* internal_default_instance() {
    return reinterpret_cast<const MxpiTextObjectList*>(
               &_MxpiTextObjectList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(MxpiTextObjectList& a, MxpiTextObjectList& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiTextObjectList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiTextObjectList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiTextObjectList* New() const final {
    return CreateMaybeMessage<MxpiTextObjectList>(nullptr);
  }

  MxpiTextObjectList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiTextObjectList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiTextObjectList& from);
  void MergeFrom(const MxpiTextObjectList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiTextObjectList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiTextObjectList";
  }
  protected:
  explicit MxpiTextObjectList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectVecFieldNumber = 1,
  };
  // repeated .MxTools.MxpiTextObject objectVec = 1;
  int objectvec_size() const;
  private:
  int _internal_objectvec_size() const;
  public:
  void clear_objectvec();
  ::MxTools::MxpiTextObject* mutable_objectvec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiTextObject >*
      mutable_objectvec();
  private:
  const ::MxTools::MxpiTextObject& _internal_objectvec(int index) const;
  ::MxTools::MxpiTextObject* _internal_add_objectvec();
  public:
  const ::MxTools::MxpiTextObject& objectvec(int index) const;
  ::MxTools::MxpiTextObject* add_objectvec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiTextObject >&
      objectvec() const;

  // @@protoc_insertion_point(class_scope:MxTools.MxpiTextObjectList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiTextObject > objectvec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiTextObject PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiTextObject) */ {
 public:
  inline MxpiTextObject() : MxpiTextObject(nullptr) {}
  virtual ~MxpiTextObject();

  MxpiTextObject(const MxpiTextObject& from);
  MxpiTextObject(MxpiTextObject&& from) noexcept
    : MxpiTextObject() {
    *this = ::std::move(from);
  }

  inline MxpiTextObject& operator=(const MxpiTextObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiTextObject& operator=(MxpiTextObject&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiTextObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiTextObject* internal_default_instance() {
    return reinterpret_cast<const MxpiTextObject*>(
               &_MxpiTextObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(MxpiTextObject& a, MxpiTextObject& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiTextObject* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiTextObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiTextObject* New() const final {
    return CreateMaybeMessage<MxpiTextObject>(nullptr);
  }

  MxpiTextObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiTextObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiTextObject& from);
  void MergeFrom(const MxpiTextObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiTextObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiTextObject";
  }
  protected:
  explicit MxpiTextObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderVecFieldNumber = 1,
    kTextFieldNumber = 11,
    kX0FieldNumber = 2,
    kY0FieldNumber = 3,
    kX1FieldNumber = 4,
    kY1FieldNumber = 5,
    kX2FieldNumber = 6,
    kY2FieldNumber = 7,
    kX3FieldNumber = 8,
    kY3FieldNumber = 9,
    kConfidenceFieldNumber = 10,
  };
  // repeated .MxTools.MxpiMetaHeader headerVec = 1;
  int headervec_size() const;
  private:
  int _internal_headervec_size() const;
  public:
  void clear_headervec();
  ::MxTools::MxpiMetaHeader* mutable_headervec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >*
      mutable_headervec();
  private:
  const ::MxTools::MxpiMetaHeader& _internal_headervec(int index) const;
  ::MxTools::MxpiMetaHeader* _internal_add_headervec();
  public:
  const ::MxTools::MxpiMetaHeader& headervec(int index) const;
  ::MxTools::MxpiMetaHeader* add_headervec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >&
      headervec() const;

  // string text = 11;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // float x0 = 2;
  void clear_x0();
  float x0() const;
  void set_x0(float value);
  private:
  float _internal_x0() const;
  void _internal_set_x0(float value);
  public:

  // float y0 = 3;
  void clear_y0();
  float y0() const;
  void set_y0(float value);
  private:
  float _internal_y0() const;
  void _internal_set_y0(float value);
  public:

  // float x1 = 4;
  void clear_x1();
  float x1() const;
  void set_x1(float value);
  private:
  float _internal_x1() const;
  void _internal_set_x1(float value);
  public:

  // float y1 = 5;
  void clear_y1();
  float y1() const;
  void set_y1(float value);
  private:
  float _internal_y1() const;
  void _internal_set_y1(float value);
  public:

  // float x2 = 6;
  void clear_x2();
  float x2() const;
  void set_x2(float value);
  private:
  float _internal_x2() const;
  void _internal_set_x2(float value);
  public:

  // float y2 = 7;
  void clear_y2();
  float y2() const;
  void set_y2(float value);
  private:
  float _internal_y2() const;
  void _internal_set_y2(float value);
  public:

  // float x3 = 8;
  void clear_x3();
  float x3() const;
  void set_x3(float value);
  private:
  float _internal_x3() const;
  void _internal_set_x3(float value);
  public:

  // float y3 = 9;
  void clear_y3();
  float y3() const;
  void set_y3(float value);
  private:
  float _internal_y3() const;
  void _internal_set_y3(float value);
  public:

  // float confidence = 10;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:MxTools.MxpiTextObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader > headervec_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  float x0_;
  float y0_;
  float x1_;
  float y1_;
  float x2_;
  float y2_;
  float x3_;
  float y3_;
  float confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiTextsInfoList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiTextsInfoList) */ {
 public:
  inline MxpiTextsInfoList() : MxpiTextsInfoList(nullptr) {}
  virtual ~MxpiTextsInfoList();

  MxpiTextsInfoList(const MxpiTextsInfoList& from);
  MxpiTextsInfoList(MxpiTextsInfoList&& from) noexcept
    : MxpiTextsInfoList() {
    *this = ::std::move(from);
  }

  inline MxpiTextsInfoList& operator=(const MxpiTextsInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiTextsInfoList& operator=(MxpiTextsInfoList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiTextsInfoList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiTextsInfoList* internal_default_instance() {
    return reinterpret_cast<const MxpiTextsInfoList*>(
               &_MxpiTextsInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(MxpiTextsInfoList& a, MxpiTextsInfoList& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiTextsInfoList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiTextsInfoList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiTextsInfoList* New() const final {
    return CreateMaybeMessage<MxpiTextsInfoList>(nullptr);
  }

  MxpiTextsInfoList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiTextsInfoList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiTextsInfoList& from);
  void MergeFrom(const MxpiTextsInfoList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiTextsInfoList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiTextsInfoList";
  }
  protected:
  explicit MxpiTextsInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextsInfoVecFieldNumber = 1,
  };
  // repeated .MxTools.MxpiTextsInfo textsInfoVec = 1;
  int textsinfovec_size() const;
  private:
  int _internal_textsinfovec_size() const;
  public:
  void clear_textsinfovec();
  ::MxTools::MxpiTextsInfo* mutable_textsinfovec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiTextsInfo >*
      mutable_textsinfovec();
  private:
  const ::MxTools::MxpiTextsInfo& _internal_textsinfovec(int index) const;
  ::MxTools::MxpiTextsInfo* _internal_add_textsinfovec();
  public:
  const ::MxTools::MxpiTextsInfo& textsinfovec(int index) const;
  ::MxTools::MxpiTextsInfo* add_textsinfovec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiTextsInfo >&
      textsinfovec() const;

  // @@protoc_insertion_point(class_scope:MxTools.MxpiTextsInfoList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiTextsInfo > textsinfovec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// -------------------------------------------------------------------

class MxpiTextsInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MxTools.MxpiTextsInfo) */ {
 public:
  inline MxpiTextsInfo() : MxpiTextsInfo(nullptr) {}
  virtual ~MxpiTextsInfo();

  MxpiTextsInfo(const MxpiTextsInfo& from);
  MxpiTextsInfo(MxpiTextsInfo&& from) noexcept
    : MxpiTextsInfo() {
    *this = ::std::move(from);
  }

  inline MxpiTextsInfo& operator=(const MxpiTextsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MxpiTextsInfo& operator=(MxpiTextsInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MxpiTextsInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MxpiTextsInfo* internal_default_instance() {
    return reinterpret_cast<const MxpiTextsInfo*>(
               &_MxpiTextsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(MxpiTextsInfo& a, MxpiTextsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MxpiTextsInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MxpiTextsInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MxpiTextsInfo* New() const final {
    return CreateMaybeMessage<MxpiTextsInfo>(nullptr);
  }

  MxpiTextsInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MxpiTextsInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MxpiTextsInfo& from);
  void MergeFrom(const MxpiTextsInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MxpiTextsInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MxTools.MxpiTextsInfo";
  }
  protected:
  explicit MxpiTextsInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MxpiDataType_2eproto);
    return ::descriptor_table_MxpiDataType_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderVecFieldNumber = 1,
    kTextFieldNumber = 2,
  };
  // repeated .MxTools.MxpiMetaHeader headerVec = 1;
  int headervec_size() const;
  private:
  int _internal_headervec_size() const;
  public:
  void clear_headervec();
  ::MxTools::MxpiMetaHeader* mutable_headervec(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >*
      mutable_headervec();
  private:
  const ::MxTools::MxpiMetaHeader& _internal_headervec(int index) const;
  ::MxTools::MxpiMetaHeader* _internal_add_headervec();
  public:
  const ::MxTools::MxpiMetaHeader& headervec(int index) const;
  ::MxTools::MxpiMetaHeader* add_headervec();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >&
      headervec() const;

  // repeated string text = 2;
  int text_size() const;
  private:
  int _internal_text_size() const;
  public:
  void clear_text();
  const std::string& text(int index) const;
  std::string* mutable_text(int index);
  void set_text(int index, const std::string& value);
  void set_text(int index, std::string&& value);
  void set_text(int index, const char* value);
  void set_text(int index, const char* value, size_t size);
  std::string* add_text();
  void add_text(const std::string& value);
  void add_text(std::string&& value);
  void add_text(const char* value);
  void add_text(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& text() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_text();
  private:
  const std::string& _internal_text(int index) const;
  std::string* _internal_add_text();
  public:

  // @@protoc_insertion_point(class_scope:MxTools.MxpiTextsInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader > headervec_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MxpiDataType_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MxpiFrame

// .MxTools.MxpiFrameInfo frameInfo = 1;
inline bool MxpiFrame::_internal_has_frameinfo() const {
  return this != internal_default_instance() && frameinfo_ != nullptr;
}
inline bool MxpiFrame::has_frameinfo() const {
  return _internal_has_frameinfo();
}
inline void MxpiFrame::clear_frameinfo() {
  if (GetArena() == nullptr && frameinfo_ != nullptr) {
    delete frameinfo_;
  }
  frameinfo_ = nullptr;
}
inline const ::MxTools::MxpiFrameInfo& MxpiFrame::_internal_frameinfo() const {
  const ::MxTools::MxpiFrameInfo* p = frameinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MxTools::MxpiFrameInfo*>(
      &::MxTools::_MxpiFrameInfo_default_instance_);
}
inline const ::MxTools::MxpiFrameInfo& MxpiFrame::frameinfo() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiFrame.frameInfo)
  return _internal_frameinfo();
}
inline void MxpiFrame::unsafe_arena_set_allocated_frameinfo(
    ::MxTools::MxpiFrameInfo* frameinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frameinfo_);
  }
  frameinfo_ = frameinfo;
  if (frameinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MxTools.MxpiFrame.frameInfo)
}
inline ::MxTools::MxpiFrameInfo* MxpiFrame::release_frameinfo() {
  
  ::MxTools::MxpiFrameInfo* temp = frameinfo_;
  frameinfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MxTools::MxpiFrameInfo* MxpiFrame::unsafe_arena_release_frameinfo() {
  // @@protoc_insertion_point(field_release:MxTools.MxpiFrame.frameInfo)
  
  ::MxTools::MxpiFrameInfo* temp = frameinfo_;
  frameinfo_ = nullptr;
  return temp;
}
inline ::MxTools::MxpiFrameInfo* MxpiFrame::_internal_mutable_frameinfo() {
  
  if (frameinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::MxTools::MxpiFrameInfo>(GetArena());
    frameinfo_ = p;
  }
  return frameinfo_;
}
inline ::MxTools::MxpiFrameInfo* MxpiFrame::mutable_frameinfo() {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiFrame.frameInfo)
  return _internal_mutable_frameinfo();
}
inline void MxpiFrame::set_allocated_frameinfo(::MxTools::MxpiFrameInfo* frameinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete frameinfo_;
  }
  if (frameinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(frameinfo);
    if (message_arena != submessage_arena) {
      frameinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frameinfo, submessage_arena);
    }
    
  } else {
    
  }
  frameinfo_ = frameinfo;
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiFrame.frameInfo)
}

// .MxTools.MxpiVisionList visionList = 2;
inline bool MxpiFrame::_internal_has_visionlist() const {
  return this != internal_default_instance() && visionlist_ != nullptr;
}
inline bool MxpiFrame::has_visionlist() const {
  return _internal_has_visionlist();
}
inline void MxpiFrame::clear_visionlist() {
  if (GetArena() == nullptr && visionlist_ != nullptr) {
    delete visionlist_;
  }
  visionlist_ = nullptr;
}
inline const ::MxTools::MxpiVisionList& MxpiFrame::_internal_visionlist() const {
  const ::MxTools::MxpiVisionList* p = visionlist_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MxTools::MxpiVisionList*>(
      &::MxTools::_MxpiVisionList_default_instance_);
}
inline const ::MxTools::MxpiVisionList& MxpiFrame::visionlist() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiFrame.visionList)
  return _internal_visionlist();
}
inline void MxpiFrame::unsafe_arena_set_allocated_visionlist(
    ::MxTools::MxpiVisionList* visionlist) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visionlist_);
  }
  visionlist_ = visionlist;
  if (visionlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MxTools.MxpiFrame.visionList)
}
inline ::MxTools::MxpiVisionList* MxpiFrame::release_visionlist() {
  
  ::MxTools::MxpiVisionList* temp = visionlist_;
  visionlist_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MxTools::MxpiVisionList* MxpiFrame::unsafe_arena_release_visionlist() {
  // @@protoc_insertion_point(field_release:MxTools.MxpiFrame.visionList)
  
  ::MxTools::MxpiVisionList* temp = visionlist_;
  visionlist_ = nullptr;
  return temp;
}
inline ::MxTools::MxpiVisionList* MxpiFrame::_internal_mutable_visionlist() {
  
  if (visionlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::MxTools::MxpiVisionList>(GetArena());
    visionlist_ = p;
  }
  return visionlist_;
}
inline ::MxTools::MxpiVisionList* MxpiFrame::mutable_visionlist() {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiFrame.visionList)
  return _internal_mutable_visionlist();
}
inline void MxpiFrame::set_allocated_visionlist(::MxTools::MxpiVisionList* visionlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete visionlist_;
  }
  if (visionlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(visionlist);
    if (message_arena != submessage_arena) {
      visionlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visionlist, submessage_arena);
    }
    
  } else {
    
  }
  visionlist_ = visionlist;
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiFrame.visionList)
}

// -------------------------------------------------------------------

// MxpiFrameInfo

// uint32 channelId = 1;
inline void MxpiFrameInfo::clear_channelid() {
  channelid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiFrameInfo::_internal_channelid() const {
  return channelid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiFrameInfo::channelid() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiFrameInfo.channelId)
  return _internal_channelid();
}
inline void MxpiFrameInfo::_internal_set_channelid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channelid_ = value;
}
inline void MxpiFrameInfo::set_channelid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiFrameInfo.channelId)
}

// uint32 frameId = 2;
inline void MxpiFrameInfo::clear_frameid() {
  frameid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiFrameInfo::_internal_frameid() const {
  return frameid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiFrameInfo::frameid() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiFrameInfo.frameId)
  return _internal_frameid();
}
inline void MxpiFrameInfo::_internal_set_frameid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frameid_ = value;
}
inline void MxpiFrameInfo::set_frameid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frameid(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiFrameInfo.frameId)
}

// bool isEos = 3;
inline void MxpiFrameInfo::clear_iseos() {
  iseos_ = false;
}
inline bool MxpiFrameInfo::_internal_iseos() const {
  return iseos_;
}
inline bool MxpiFrameInfo::iseos() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiFrameInfo.isEos)
  return _internal_iseos();
}
inline void MxpiFrameInfo::_internal_set_iseos(bool value) {
  
  iseos_ = value;
}
inline void MxpiFrameInfo::set_iseos(bool value) {
  _internal_set_iseos(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiFrameInfo.isEos)
}

// -------------------------------------------------------------------

// MxpiVisionList

// repeated .MxTools.MxpiVision visionVec = 1;
inline int MxpiVisionList::_internal_visionvec_size() const {
  return visionvec_.size();
}
inline int MxpiVisionList::visionvec_size() const {
  return _internal_visionvec_size();
}
inline void MxpiVisionList::clear_visionvec() {
  visionvec_.Clear();
}
inline ::MxTools::MxpiVision* MxpiVisionList::mutable_visionvec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiVisionList.visionVec)
  return visionvec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiVision >*
MxpiVisionList::mutable_visionvec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiVisionList.visionVec)
  return &visionvec_;
}
inline const ::MxTools::MxpiVision& MxpiVisionList::_internal_visionvec(int index) const {
  return visionvec_.Get(index);
}
inline const ::MxTools::MxpiVision& MxpiVisionList::visionvec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionList.visionVec)
  return _internal_visionvec(index);
}
inline ::MxTools::MxpiVision* MxpiVisionList::_internal_add_visionvec() {
  return visionvec_.Add();
}
inline ::MxTools::MxpiVision* MxpiVisionList::add_visionvec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiVisionList.visionVec)
  return _internal_add_visionvec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiVision >&
MxpiVisionList::visionvec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiVisionList.visionVec)
  return visionvec_;
}

// -------------------------------------------------------------------

// MxpiVision

// repeated .MxTools.MxpiMetaHeader headerVec = 1;
inline int MxpiVision::_internal_headervec_size() const {
  return headervec_.size();
}
inline int MxpiVision::headervec_size() const {
  return _internal_headervec_size();
}
inline void MxpiVision::clear_headervec() {
  headervec_.Clear();
}
inline ::MxTools::MxpiMetaHeader* MxpiVision::mutable_headervec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiVision.headerVec)
  return headervec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >*
MxpiVision::mutable_headervec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiVision.headerVec)
  return &headervec_;
}
inline const ::MxTools::MxpiMetaHeader& MxpiVision::_internal_headervec(int index) const {
  return headervec_.Get(index);
}
inline const ::MxTools::MxpiMetaHeader& MxpiVision::headervec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVision.headerVec)
  return _internal_headervec(index);
}
inline ::MxTools::MxpiMetaHeader* MxpiVision::_internal_add_headervec() {
  return headervec_.Add();
}
inline ::MxTools::MxpiMetaHeader* MxpiVision::add_headervec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiVision.headerVec)
  return _internal_add_headervec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >&
MxpiVision::headervec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiVision.headerVec)
  return headervec_;
}

// .MxTools.MxpiVisionInfo visionInfo = 2;
inline bool MxpiVision::_internal_has_visioninfo() const {
  return this != internal_default_instance() && visioninfo_ != nullptr;
}
inline bool MxpiVision::has_visioninfo() const {
  return _internal_has_visioninfo();
}
inline void MxpiVision::clear_visioninfo() {
  if (GetArena() == nullptr && visioninfo_ != nullptr) {
    delete visioninfo_;
  }
  visioninfo_ = nullptr;
}
inline const ::MxTools::MxpiVisionInfo& MxpiVision::_internal_visioninfo() const {
  const ::MxTools::MxpiVisionInfo* p = visioninfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MxTools::MxpiVisionInfo*>(
      &::MxTools::_MxpiVisionInfo_default_instance_);
}
inline const ::MxTools::MxpiVisionInfo& MxpiVision::visioninfo() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVision.visionInfo)
  return _internal_visioninfo();
}
inline void MxpiVision::unsafe_arena_set_allocated_visioninfo(
    ::MxTools::MxpiVisionInfo* visioninfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visioninfo_);
  }
  visioninfo_ = visioninfo;
  if (visioninfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MxTools.MxpiVision.visionInfo)
}
inline ::MxTools::MxpiVisionInfo* MxpiVision::release_visioninfo() {
  
  ::MxTools::MxpiVisionInfo* temp = visioninfo_;
  visioninfo_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MxTools::MxpiVisionInfo* MxpiVision::unsafe_arena_release_visioninfo() {
  // @@protoc_insertion_point(field_release:MxTools.MxpiVision.visionInfo)
  
  ::MxTools::MxpiVisionInfo* temp = visioninfo_;
  visioninfo_ = nullptr;
  return temp;
}
inline ::MxTools::MxpiVisionInfo* MxpiVision::_internal_mutable_visioninfo() {
  
  if (visioninfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::MxTools::MxpiVisionInfo>(GetArena());
    visioninfo_ = p;
  }
  return visioninfo_;
}
inline ::MxTools::MxpiVisionInfo* MxpiVision::mutable_visioninfo() {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiVision.visionInfo)
  return _internal_mutable_visioninfo();
}
inline void MxpiVision::set_allocated_visioninfo(::MxTools::MxpiVisionInfo* visioninfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete visioninfo_;
  }
  if (visioninfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(visioninfo);
    if (message_arena != submessage_arena) {
      visioninfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visioninfo, submessage_arena);
    }
    
  } else {
    
  }
  visioninfo_ = visioninfo;
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiVision.visionInfo)
}

// .MxTools.MxpiVisionData visionData = 3;
inline bool MxpiVision::_internal_has_visiondata() const {
  return this != internal_default_instance() && visiondata_ != nullptr;
}
inline bool MxpiVision::has_visiondata() const {
  return _internal_has_visiondata();
}
inline void MxpiVision::clear_visiondata() {
  if (GetArena() == nullptr && visiondata_ != nullptr) {
    delete visiondata_;
  }
  visiondata_ = nullptr;
}
inline const ::MxTools::MxpiVisionData& MxpiVision::_internal_visiondata() const {
  const ::MxTools::MxpiVisionData* p = visiondata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MxTools::MxpiVisionData*>(
      &::MxTools::_MxpiVisionData_default_instance_);
}
inline const ::MxTools::MxpiVisionData& MxpiVision::visiondata() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVision.visionData)
  return _internal_visiondata();
}
inline void MxpiVision::unsafe_arena_set_allocated_visiondata(
    ::MxTools::MxpiVisionData* visiondata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visiondata_);
  }
  visiondata_ = visiondata;
  if (visiondata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MxTools.MxpiVision.visionData)
}
inline ::MxTools::MxpiVisionData* MxpiVision::release_visiondata() {
  
  ::MxTools::MxpiVisionData* temp = visiondata_;
  visiondata_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MxTools::MxpiVisionData* MxpiVision::unsafe_arena_release_visiondata() {
  // @@protoc_insertion_point(field_release:MxTools.MxpiVision.visionData)
  
  ::MxTools::MxpiVisionData* temp = visiondata_;
  visiondata_ = nullptr;
  return temp;
}
inline ::MxTools::MxpiVisionData* MxpiVision::_internal_mutable_visiondata() {
  
  if (visiondata_ == nullptr) {
    auto* p = CreateMaybeMessage<::MxTools::MxpiVisionData>(GetArena());
    visiondata_ = p;
  }
  return visiondata_;
}
inline ::MxTools::MxpiVisionData* MxpiVision::mutable_visiondata() {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiVision.visionData)
  return _internal_mutable_visiondata();
}
inline void MxpiVision::set_allocated_visiondata(::MxTools::MxpiVisionData* visiondata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete visiondata_;
  }
  if (visiondata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(visiondata);
    if (message_arena != submessage_arena) {
      visiondata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visiondata, submessage_arena);
    }
    
  } else {
    
  }
  visiondata_ = visiondata;
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiVision.visionData)
}

// -------------------------------------------------------------------

// MxpiMetaHeader

// string parentName = 1;
inline void MxpiMetaHeader::clear_parentname() {
  parentname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MxpiMetaHeader::parentname() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiMetaHeader.parentName)
  return _internal_parentname();
}
inline void MxpiMetaHeader::set_parentname(const std::string& value) {
  _internal_set_parentname(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiMetaHeader.parentName)
}
inline std::string* MxpiMetaHeader::mutable_parentname() {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiMetaHeader.parentName)
  return _internal_mutable_parentname();
}
inline const std::string& MxpiMetaHeader::_internal_parentname() const {
  return parentname_.Get();
}
inline void MxpiMetaHeader::_internal_set_parentname(const std::string& value) {
  
  parentname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MxpiMetaHeader::set_parentname(std::string&& value) {
  
  parentname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MxTools.MxpiMetaHeader.parentName)
}
inline void MxpiMetaHeader::set_parentname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parentname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MxTools.MxpiMetaHeader.parentName)
}
inline void MxpiMetaHeader::set_parentname(const char* value,
    size_t size) {
  
  parentname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MxTools.MxpiMetaHeader.parentName)
}
inline std::string* MxpiMetaHeader::_internal_mutable_parentname() {
  
  return parentname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MxpiMetaHeader::release_parentname() {
  // @@protoc_insertion_point(field_release:MxTools.MxpiMetaHeader.parentName)
  return parentname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MxpiMetaHeader::set_allocated_parentname(std::string* parentname) {
  if (parentname != nullptr) {
    
  } else {
    
  }
  parentname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parentname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiMetaHeader.parentName)
}

// int32 memberId = 2;
inline void MxpiMetaHeader::clear_memberid() {
  memberid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MxpiMetaHeader::_internal_memberid() const {
  return memberid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MxpiMetaHeader::memberid() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiMetaHeader.memberId)
  return _internal_memberid();
}
inline void MxpiMetaHeader::_internal_set_memberid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  memberid_ = value;
}
inline void MxpiMetaHeader::set_memberid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_memberid(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiMetaHeader.memberId)
}

// string dataSource = 3;
inline void MxpiMetaHeader::clear_datasource() {
  datasource_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MxpiMetaHeader::datasource() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiMetaHeader.dataSource)
  return _internal_datasource();
}
inline void MxpiMetaHeader::set_datasource(const std::string& value) {
  _internal_set_datasource(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiMetaHeader.dataSource)
}
inline std::string* MxpiMetaHeader::mutable_datasource() {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiMetaHeader.dataSource)
  return _internal_mutable_datasource();
}
inline const std::string& MxpiMetaHeader::_internal_datasource() const {
  return datasource_.Get();
}
inline void MxpiMetaHeader::_internal_set_datasource(const std::string& value) {
  
  datasource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MxpiMetaHeader::set_datasource(std::string&& value) {
  
  datasource_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MxTools.MxpiMetaHeader.dataSource)
}
inline void MxpiMetaHeader::set_datasource(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datasource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MxTools.MxpiMetaHeader.dataSource)
}
inline void MxpiMetaHeader::set_datasource(const char* value,
    size_t size) {
  
  datasource_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MxTools.MxpiMetaHeader.dataSource)
}
inline std::string* MxpiMetaHeader::_internal_mutable_datasource() {
  
  return datasource_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MxpiMetaHeader::release_datasource() {
  // @@protoc_insertion_point(field_release:MxTools.MxpiMetaHeader.dataSource)
  return datasource_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MxpiMetaHeader::set_allocated_datasource(std::string* datasource) {
  if (datasource != nullptr) {
    
  } else {
    
  }
  datasource_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datasource,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiMetaHeader.dataSource)
}

// -------------------------------------------------------------------

// MxpiVisionInfo

// uint32 format = 1;
inline void MxpiVisionInfo::clear_format() {
  format_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionInfo::_internal_format() const {
  return format_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionInfo::format() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionInfo.format)
  return _internal_format();
}
inline void MxpiVisionInfo::_internal_set_format(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  format_ = value;
}
inline void MxpiVisionInfo::set_format(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionInfo.format)
}

// uint32 width = 2;
inline void MxpiVisionInfo::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionInfo::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionInfo::width() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionInfo.width)
  return _internal_width();
}
inline void MxpiVisionInfo::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void MxpiVisionInfo::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionInfo.width)
}

// uint32 height = 3;
inline void MxpiVisionInfo::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionInfo::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionInfo::height() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionInfo.height)
  return _internal_height();
}
inline void MxpiVisionInfo::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void MxpiVisionInfo::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionInfo.height)
}

// uint32 widthAligned = 4;
inline void MxpiVisionInfo::clear_widthaligned() {
  widthaligned_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionInfo::_internal_widthaligned() const {
  return widthaligned_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionInfo::widthaligned() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionInfo.widthAligned)
  return _internal_widthaligned();
}
inline void MxpiVisionInfo::_internal_set_widthaligned(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  widthaligned_ = value;
}
inline void MxpiVisionInfo::set_widthaligned(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_widthaligned(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionInfo.widthAligned)
}

// uint32 heightAligned = 5;
inline void MxpiVisionInfo::clear_heightaligned() {
  heightaligned_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionInfo::_internal_heightaligned() const {
  return heightaligned_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionInfo::heightaligned() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionInfo.heightAligned)
  return _internal_heightaligned();
}
inline void MxpiVisionInfo::_internal_set_heightaligned(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  heightaligned_ = value;
}
inline void MxpiVisionInfo::set_heightaligned(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_heightaligned(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionInfo.heightAligned)
}

// uint32 resizeType = 6;
inline void MxpiVisionInfo::clear_resizetype() {
  resizetype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionInfo::_internal_resizetype() const {
  return resizetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionInfo::resizetype() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionInfo.resizeType)
  return _internal_resizetype();
}
inline void MxpiVisionInfo::_internal_set_resizetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  resizetype_ = value;
}
inline void MxpiVisionInfo::set_resizetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_resizetype(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionInfo.resizeType)
}

// float keepAspectRatioScaling = 7;
inline void MxpiVisionInfo::clear_keepaspectratioscaling() {
  keepaspectratioscaling_ = 0;
}
inline float MxpiVisionInfo::_internal_keepaspectratioscaling() const {
  return keepaspectratioscaling_;
}
inline float MxpiVisionInfo::keepaspectratioscaling() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionInfo.keepAspectRatioScaling)
  return _internal_keepaspectratioscaling();
}
inline void MxpiVisionInfo::_internal_set_keepaspectratioscaling(float value) {
  
  keepaspectratioscaling_ = value;
}
inline void MxpiVisionInfo::set_keepaspectratioscaling(float value) {
  _internal_set_keepaspectratioscaling(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionInfo.keepAspectRatioScaling)
}

// repeated .MxTools.MxpiVisionPreProcess preprocessInfo = 8;
inline int MxpiVisionInfo::_internal_preprocessinfo_size() const {
  return preprocessinfo_.size();
}
inline int MxpiVisionInfo::preprocessinfo_size() const {
  return _internal_preprocessinfo_size();
}
inline void MxpiVisionInfo::clear_preprocessinfo() {
  preprocessinfo_.Clear();
}
inline ::MxTools::MxpiVisionPreProcess* MxpiVisionInfo::mutable_preprocessinfo(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiVisionInfo.preprocessInfo)
  return preprocessinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiVisionPreProcess >*
MxpiVisionInfo::mutable_preprocessinfo() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiVisionInfo.preprocessInfo)
  return &preprocessinfo_;
}
inline const ::MxTools::MxpiVisionPreProcess& MxpiVisionInfo::_internal_preprocessinfo(int index) const {
  return preprocessinfo_.Get(index);
}
inline const ::MxTools::MxpiVisionPreProcess& MxpiVisionInfo::preprocessinfo(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionInfo.preprocessInfo)
  return _internal_preprocessinfo(index);
}
inline ::MxTools::MxpiVisionPreProcess* MxpiVisionInfo::_internal_add_preprocessinfo() {
  return preprocessinfo_.Add();
}
inline ::MxTools::MxpiVisionPreProcess* MxpiVisionInfo::add_preprocessinfo() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiVisionInfo.preprocessInfo)
  return _internal_add_preprocessinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiVisionPreProcess >&
MxpiVisionInfo::preprocessinfo() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiVisionInfo.preprocessInfo)
  return preprocessinfo_;
}

// -------------------------------------------------------------------

// MxpiVisionPreProcess

// uint32 widthSrc = 1;
inline void MxpiVisionPreProcess::clear_widthsrc() {
  widthsrc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionPreProcess::_internal_widthsrc() const {
  return widthsrc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionPreProcess::widthsrc() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionPreProcess.widthSrc)
  return _internal_widthsrc();
}
inline void MxpiVisionPreProcess::_internal_set_widthsrc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  widthsrc_ = value;
}
inline void MxpiVisionPreProcess::set_widthsrc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_widthsrc(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionPreProcess.widthSrc)
}

// uint32 heightSrc = 2;
inline void MxpiVisionPreProcess::clear_heightsrc() {
  heightsrc_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionPreProcess::_internal_heightsrc() const {
  return heightsrc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionPreProcess::heightsrc() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionPreProcess.heightSrc)
  return _internal_heightsrc();
}
inline void MxpiVisionPreProcess::_internal_set_heightsrc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  heightsrc_ = value;
}
inline void MxpiVisionPreProcess::set_heightsrc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_heightsrc(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionPreProcess.heightSrc)
}

// uint32 cropLeft = 3;
inline void MxpiVisionPreProcess::clear_cropleft() {
  cropleft_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionPreProcess::_internal_cropleft() const {
  return cropleft_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionPreProcess::cropleft() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionPreProcess.cropLeft)
  return _internal_cropleft();
}
inline void MxpiVisionPreProcess::_internal_set_cropleft(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cropleft_ = value;
}
inline void MxpiVisionPreProcess::set_cropleft(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cropleft(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionPreProcess.cropLeft)
}

// uint32 cropRight = 4;
inline void MxpiVisionPreProcess::clear_cropright() {
  cropright_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionPreProcess::_internal_cropright() const {
  return cropright_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionPreProcess::cropright() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionPreProcess.cropRight)
  return _internal_cropright();
}
inline void MxpiVisionPreProcess::_internal_set_cropright(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cropright_ = value;
}
inline void MxpiVisionPreProcess::set_cropright(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cropright(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionPreProcess.cropRight)
}

// uint32 cropTop = 5;
inline void MxpiVisionPreProcess::clear_croptop() {
  croptop_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionPreProcess::_internal_croptop() const {
  return croptop_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionPreProcess::croptop() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionPreProcess.cropTop)
  return _internal_croptop();
}
inline void MxpiVisionPreProcess::_internal_set_croptop(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  croptop_ = value;
}
inline void MxpiVisionPreProcess::set_croptop(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_croptop(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionPreProcess.cropTop)
}

// uint32 cropBottom = 6;
inline void MxpiVisionPreProcess::clear_cropbottom() {
  cropbottom_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionPreProcess::_internal_cropbottom() const {
  return cropbottom_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionPreProcess::cropbottom() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionPreProcess.cropBottom)
  return _internal_cropbottom();
}
inline void MxpiVisionPreProcess::_internal_set_cropbottom(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cropbottom_ = value;
}
inline void MxpiVisionPreProcess::set_cropbottom(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cropbottom(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionPreProcess.cropBottom)
}

// uint32 pasteLeft = 7;
inline void MxpiVisionPreProcess::clear_pasteleft() {
  pasteleft_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionPreProcess::_internal_pasteleft() const {
  return pasteleft_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionPreProcess::pasteleft() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionPreProcess.pasteLeft)
  return _internal_pasteleft();
}
inline void MxpiVisionPreProcess::_internal_set_pasteleft(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pasteleft_ = value;
}
inline void MxpiVisionPreProcess::set_pasteleft(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pasteleft(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionPreProcess.pasteLeft)
}

// uint32 pasteRight = 8;
inline void MxpiVisionPreProcess::clear_pasteright() {
  pasteright_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionPreProcess::_internal_pasteright() const {
  return pasteright_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionPreProcess::pasteright() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionPreProcess.pasteRight)
  return _internal_pasteright();
}
inline void MxpiVisionPreProcess::_internal_set_pasteright(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pasteright_ = value;
}
inline void MxpiVisionPreProcess::set_pasteright(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pasteright(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionPreProcess.pasteRight)
}

// uint32 pasteTop = 9;
inline void MxpiVisionPreProcess::clear_pastetop() {
  pastetop_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionPreProcess::_internal_pastetop() const {
  return pastetop_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionPreProcess::pastetop() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionPreProcess.pasteTop)
  return _internal_pastetop();
}
inline void MxpiVisionPreProcess::_internal_set_pastetop(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pastetop_ = value;
}
inline void MxpiVisionPreProcess::set_pastetop(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pastetop(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionPreProcess.pasteTop)
}

// uint32 pasteBottom = 10;
inline void MxpiVisionPreProcess::clear_pastebottom() {
  pastebottom_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionPreProcess::_internal_pastebottom() const {
  return pastebottom_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionPreProcess::pastebottom() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionPreProcess.pasteBottom)
  return _internal_pastebottom();
}
inline void MxpiVisionPreProcess::_internal_set_pastebottom(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pastebottom_ = value;
}
inline void MxpiVisionPreProcess::set_pastebottom(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pastebottom(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionPreProcess.pasteBottom)
}

// uint32 interpolation = 11;
inline void MxpiVisionPreProcess::clear_interpolation() {
  interpolation_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionPreProcess::_internal_interpolation() const {
  return interpolation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionPreProcess::interpolation() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionPreProcess.interpolation)
  return _internal_interpolation();
}
inline void MxpiVisionPreProcess::_internal_set_interpolation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  interpolation_ = value;
}
inline void MxpiVisionPreProcess::set_interpolation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_interpolation(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionPreProcess.interpolation)
}

// string elementName = 12;
inline void MxpiVisionPreProcess::clear_elementname() {
  elementname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MxpiVisionPreProcess::elementname() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionPreProcess.elementName)
  return _internal_elementname();
}
inline void MxpiVisionPreProcess::set_elementname(const std::string& value) {
  _internal_set_elementname(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionPreProcess.elementName)
}
inline std::string* MxpiVisionPreProcess::mutable_elementname() {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiVisionPreProcess.elementName)
  return _internal_mutable_elementname();
}
inline const std::string& MxpiVisionPreProcess::_internal_elementname() const {
  return elementname_.Get();
}
inline void MxpiVisionPreProcess::_internal_set_elementname(const std::string& value) {
  
  elementname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MxpiVisionPreProcess::set_elementname(std::string&& value) {
  
  elementname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MxTools.MxpiVisionPreProcess.elementName)
}
inline void MxpiVisionPreProcess::set_elementname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  elementname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MxTools.MxpiVisionPreProcess.elementName)
}
inline void MxpiVisionPreProcess::set_elementname(const char* value,
    size_t size) {
  
  elementname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MxTools.MxpiVisionPreProcess.elementName)
}
inline std::string* MxpiVisionPreProcess::_internal_mutable_elementname() {
  
  return elementname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MxpiVisionPreProcess::release_elementname() {
  // @@protoc_insertion_point(field_release:MxTools.MxpiVisionPreProcess.elementName)
  return elementname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MxpiVisionPreProcess::set_allocated_elementname(std::string* elementname) {
  if (elementname != nullptr) {
    
  } else {
    
  }
  elementname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), elementname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiVisionPreProcess.elementName)
}

// -------------------------------------------------------------------

// MxpiVisionData

// uint64 dataPtr = 1;
inline void MxpiVisionData::clear_dataptr() {
  dataptr_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MxpiVisionData::_internal_dataptr() const {
  return dataptr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MxpiVisionData::dataptr() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionData.dataPtr)
  return _internal_dataptr();
}
inline void MxpiVisionData::_internal_set_dataptr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  dataptr_ = value;
}
inline void MxpiVisionData::set_dataptr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dataptr(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionData.dataPtr)
}

// int32 dataSize = 2;
inline void MxpiVisionData::clear_datasize() {
  datasize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MxpiVisionData::_internal_datasize() const {
  return datasize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MxpiVisionData::datasize() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionData.dataSize)
  return _internal_datasize();
}
inline void MxpiVisionData::_internal_set_datasize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  datasize_ = value;
}
inline void MxpiVisionData::set_datasize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_datasize(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionData.dataSize)
}

// uint32 deviceId = 3;
inline void MxpiVisionData::clear_deviceid() {
  deviceid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionData::_internal_deviceid() const {
  return deviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiVisionData::deviceid() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionData.deviceId)
  return _internal_deviceid();
}
inline void MxpiVisionData::_internal_set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  deviceid_ = value;
}
inline void MxpiVisionData::set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionData.deviceId)
}

// .MxTools.MxpiMemoryType memType = 4;
inline void MxpiVisionData::clear_memtype() {
  memtype_ = 0;
}
inline ::MxTools::MxpiMemoryType MxpiVisionData::_internal_memtype() const {
  return static_cast< ::MxTools::MxpiMemoryType >(memtype_);
}
inline ::MxTools::MxpiMemoryType MxpiVisionData::memtype() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionData.memType)
  return _internal_memtype();
}
inline void MxpiVisionData::_internal_set_memtype(::MxTools::MxpiMemoryType value) {
  
  memtype_ = value;
}
inline void MxpiVisionData::set_memtype(::MxTools::MxpiMemoryType value) {
  _internal_set_memtype(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionData.memType)
}

// uint64 freeFunc = 5;
inline void MxpiVisionData::clear_freefunc() {
  freefunc_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MxpiVisionData::_internal_freefunc() const {
  return freefunc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MxpiVisionData::freefunc() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionData.freeFunc)
  return _internal_freefunc();
}
inline void MxpiVisionData::_internal_set_freefunc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  freefunc_ = value;
}
inline void MxpiVisionData::set_freefunc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_freefunc(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionData.freeFunc)
}

// bytes dataStr = 6;
inline void MxpiVisionData::clear_datastr() {
  datastr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MxpiVisionData::datastr() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionData.dataStr)
  return _internal_datastr();
}
inline void MxpiVisionData::set_datastr(const std::string& value) {
  _internal_set_datastr(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionData.dataStr)
}
inline std::string* MxpiVisionData::mutable_datastr() {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiVisionData.dataStr)
  return _internal_mutable_datastr();
}
inline const std::string& MxpiVisionData::_internal_datastr() const {
  return datastr_.Get();
}
inline void MxpiVisionData::_internal_set_datastr(const std::string& value) {
  
  datastr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MxpiVisionData::set_datastr(std::string&& value) {
  
  datastr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MxTools.MxpiVisionData.dataStr)
}
inline void MxpiVisionData::set_datastr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datastr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MxTools.MxpiVisionData.dataStr)
}
inline void MxpiVisionData::set_datastr(const void* value,
    size_t size) {
  
  datastr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MxTools.MxpiVisionData.dataStr)
}
inline std::string* MxpiVisionData::_internal_mutable_datastr() {
  
  return datastr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MxpiVisionData::release_datastr() {
  // @@protoc_insertion_point(field_release:MxTools.MxpiVisionData.dataStr)
  return datastr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MxpiVisionData::set_allocated_datastr(std::string* datastr) {
  if (datastr != nullptr) {
    
  } else {
    
  }
  datastr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datastr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiVisionData.dataStr)
}

// .MxTools.MxpiDataType dataType = 7;
inline void MxpiVisionData::clear_datatype() {
  datatype_ = 0;
}
inline ::MxTools::MxpiDataType MxpiVisionData::_internal_datatype() const {
  return static_cast< ::MxTools::MxpiDataType >(datatype_);
}
inline ::MxTools::MxpiDataType MxpiVisionData::datatype() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionData.dataType)
  return _internal_datatype();
}
inline void MxpiVisionData::_internal_set_datatype(::MxTools::MxpiDataType value) {
  
  datatype_ = value;
}
inline void MxpiVisionData::set_datatype(::MxTools::MxpiDataType value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionData.dataType)
}

// uint64 matPtr = 8;
inline void MxpiVisionData::clear_matptr() {
  matptr_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MxpiVisionData::_internal_matptr() const {
  return matptr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MxpiVisionData::matptr() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiVisionData.matPtr)
  return _internal_matptr();
}
inline void MxpiVisionData::_internal_set_matptr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  matptr_ = value;
}
inline void MxpiVisionData::set_matptr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_matptr(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiVisionData.matPtr)
}

// -------------------------------------------------------------------

// MxpiObjectList

// repeated .MxTools.MxpiObject objectVec = 1;
inline int MxpiObjectList::_internal_objectvec_size() const {
  return objectvec_.size();
}
inline int MxpiObjectList::objectvec_size() const {
  return _internal_objectvec_size();
}
inline void MxpiObjectList::clear_objectvec() {
  objectvec_.Clear();
}
inline ::MxTools::MxpiObject* MxpiObjectList::mutable_objectvec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiObjectList.objectVec)
  return objectvec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiObject >*
MxpiObjectList::mutable_objectvec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiObjectList.objectVec)
  return &objectvec_;
}
inline const ::MxTools::MxpiObject& MxpiObjectList::_internal_objectvec(int index) const {
  return objectvec_.Get(index);
}
inline const ::MxTools::MxpiObject& MxpiObjectList::objectvec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiObjectList.objectVec)
  return _internal_objectvec(index);
}
inline ::MxTools::MxpiObject* MxpiObjectList::_internal_add_objectvec() {
  return objectvec_.Add();
}
inline ::MxTools::MxpiObject* MxpiObjectList::add_objectvec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiObjectList.objectVec)
  return _internal_add_objectvec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiObject >&
MxpiObjectList::objectvec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiObjectList.objectVec)
  return objectvec_;
}

// -------------------------------------------------------------------

// MxpiObject

// repeated .MxTools.MxpiMetaHeader headerVec = 1;
inline int MxpiObject::_internal_headervec_size() const {
  return headervec_.size();
}
inline int MxpiObject::headervec_size() const {
  return _internal_headervec_size();
}
inline void MxpiObject::clear_headervec() {
  headervec_.Clear();
}
inline ::MxTools::MxpiMetaHeader* MxpiObject::mutable_headervec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiObject.headerVec)
  return headervec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >*
MxpiObject::mutable_headervec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiObject.headerVec)
  return &headervec_;
}
inline const ::MxTools::MxpiMetaHeader& MxpiObject::_internal_headervec(int index) const {
  return headervec_.Get(index);
}
inline const ::MxTools::MxpiMetaHeader& MxpiObject::headervec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiObject.headerVec)
  return _internal_headervec(index);
}
inline ::MxTools::MxpiMetaHeader* MxpiObject::_internal_add_headervec() {
  return headervec_.Add();
}
inline ::MxTools::MxpiMetaHeader* MxpiObject::add_headervec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiObject.headerVec)
  return _internal_add_headervec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >&
MxpiObject::headervec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiObject.headerVec)
  return headervec_;
}

// float x0 = 2;
inline void MxpiObject::clear_x0() {
  x0_ = 0;
}
inline float MxpiObject::_internal_x0() const {
  return x0_;
}
inline float MxpiObject::x0() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiObject.x0)
  return _internal_x0();
}
inline void MxpiObject::_internal_set_x0(float value) {
  
  x0_ = value;
}
inline void MxpiObject::set_x0(float value) {
  _internal_set_x0(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiObject.x0)
}

// float y0 = 3;
inline void MxpiObject::clear_y0() {
  y0_ = 0;
}
inline float MxpiObject::_internal_y0() const {
  return y0_;
}
inline float MxpiObject::y0() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiObject.y0)
  return _internal_y0();
}
inline void MxpiObject::_internal_set_y0(float value) {
  
  y0_ = value;
}
inline void MxpiObject::set_y0(float value) {
  _internal_set_y0(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiObject.y0)
}

// float x1 = 4;
inline void MxpiObject::clear_x1() {
  x1_ = 0;
}
inline float MxpiObject::_internal_x1() const {
  return x1_;
}
inline float MxpiObject::x1() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiObject.x1)
  return _internal_x1();
}
inline void MxpiObject::_internal_set_x1(float value) {
  
  x1_ = value;
}
inline void MxpiObject::set_x1(float value) {
  _internal_set_x1(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiObject.x1)
}

// float y1 = 5;
inline void MxpiObject::clear_y1() {
  y1_ = 0;
}
inline float MxpiObject::_internal_y1() const {
  return y1_;
}
inline float MxpiObject::y1() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiObject.y1)
  return _internal_y1();
}
inline void MxpiObject::_internal_set_y1(float value) {
  
  y1_ = value;
}
inline void MxpiObject::set_y1(float value) {
  _internal_set_y1(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiObject.y1)
}

// repeated .MxTools.MxpiClass classVec = 6;
inline int MxpiObject::_internal_classvec_size() const {
  return classvec_.size();
}
inline int MxpiObject::classvec_size() const {
  return _internal_classvec_size();
}
inline void MxpiObject::clear_classvec() {
  classvec_.Clear();
}
inline ::MxTools::MxpiClass* MxpiObject::mutable_classvec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiObject.classVec)
  return classvec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiClass >*
MxpiObject::mutable_classvec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiObject.classVec)
  return &classvec_;
}
inline const ::MxTools::MxpiClass& MxpiObject::_internal_classvec(int index) const {
  return classvec_.Get(index);
}
inline const ::MxTools::MxpiClass& MxpiObject::classvec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiObject.classVec)
  return _internal_classvec(index);
}
inline ::MxTools::MxpiClass* MxpiObject::_internal_add_classvec() {
  return classvec_.Add();
}
inline ::MxTools::MxpiClass* MxpiObject::add_classvec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiObject.classVec)
  return _internal_add_classvec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiClass >&
MxpiObject::classvec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiObject.classVec)
  return classvec_;
}

// .MxTools.MxpiImageMask imageMask = 7;
inline bool MxpiObject::_internal_has_imagemask() const {
  return this != internal_default_instance() && imagemask_ != nullptr;
}
inline bool MxpiObject::has_imagemask() const {
  return _internal_has_imagemask();
}
inline void MxpiObject::clear_imagemask() {
  if (GetArena() == nullptr && imagemask_ != nullptr) {
    delete imagemask_;
  }
  imagemask_ = nullptr;
}
inline const ::MxTools::MxpiImageMask& MxpiObject::_internal_imagemask() const {
  const ::MxTools::MxpiImageMask* p = imagemask_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MxTools::MxpiImageMask*>(
      &::MxTools::_MxpiImageMask_default_instance_);
}
inline const ::MxTools::MxpiImageMask& MxpiObject::imagemask() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiObject.imageMask)
  return _internal_imagemask();
}
inline void MxpiObject::unsafe_arena_set_allocated_imagemask(
    ::MxTools::MxpiImageMask* imagemask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imagemask_);
  }
  imagemask_ = imagemask;
  if (imagemask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MxTools.MxpiObject.imageMask)
}
inline ::MxTools::MxpiImageMask* MxpiObject::release_imagemask() {
  
  ::MxTools::MxpiImageMask* temp = imagemask_;
  imagemask_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::MxTools::MxpiImageMask* MxpiObject::unsafe_arena_release_imagemask() {
  // @@protoc_insertion_point(field_release:MxTools.MxpiObject.imageMask)
  
  ::MxTools::MxpiImageMask* temp = imagemask_;
  imagemask_ = nullptr;
  return temp;
}
inline ::MxTools::MxpiImageMask* MxpiObject::_internal_mutable_imagemask() {
  
  if (imagemask_ == nullptr) {
    auto* p = CreateMaybeMessage<::MxTools::MxpiImageMask>(GetArena());
    imagemask_ = p;
  }
  return imagemask_;
}
inline ::MxTools::MxpiImageMask* MxpiObject::mutable_imagemask() {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiObject.imageMask)
  return _internal_mutable_imagemask();
}
inline void MxpiObject::set_allocated_imagemask(::MxTools::MxpiImageMask* imagemask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete imagemask_;
  }
  if (imagemask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(imagemask);
    if (message_arena != submessage_arena) {
      imagemask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imagemask, submessage_arena);
    }
    
  } else {
    
  }
  imagemask_ = imagemask;
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiObject.imageMask)
}

// -------------------------------------------------------------------

// MxpiImageMaskList

// repeated .MxTools.MxpiImageMask imageMaskVec = 1;
inline int MxpiImageMaskList::_internal_imagemaskvec_size() const {
  return imagemaskvec_.size();
}
inline int MxpiImageMaskList::imagemaskvec_size() const {
  return _internal_imagemaskvec_size();
}
inline void MxpiImageMaskList::clear_imagemaskvec() {
  imagemaskvec_.Clear();
}
inline ::MxTools::MxpiImageMask* MxpiImageMaskList::mutable_imagemaskvec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiImageMaskList.imageMaskVec)
  return imagemaskvec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiImageMask >*
MxpiImageMaskList::mutable_imagemaskvec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiImageMaskList.imageMaskVec)
  return &imagemaskvec_;
}
inline const ::MxTools::MxpiImageMask& MxpiImageMaskList::_internal_imagemaskvec(int index) const {
  return imagemaskvec_.Get(index);
}
inline const ::MxTools::MxpiImageMask& MxpiImageMaskList::imagemaskvec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiImageMaskList.imageMaskVec)
  return _internal_imagemaskvec(index);
}
inline ::MxTools::MxpiImageMask* MxpiImageMaskList::_internal_add_imagemaskvec() {
  return imagemaskvec_.Add();
}
inline ::MxTools::MxpiImageMask* MxpiImageMaskList::add_imagemaskvec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiImageMaskList.imageMaskVec)
  return _internal_add_imagemaskvec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiImageMask >&
MxpiImageMaskList::imagemaskvec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiImageMaskList.imageMaskVec)
  return imagemaskvec_;
}

// -------------------------------------------------------------------

// MxpiImageMask

// repeated .MxTools.MxpiMetaHeader headerVec = 1;
inline int MxpiImageMask::_internal_headervec_size() const {
  return headervec_.size();
}
inline int MxpiImageMask::headervec_size() const {
  return _internal_headervec_size();
}
inline void MxpiImageMask::clear_headervec() {
  headervec_.Clear();
}
inline ::MxTools::MxpiMetaHeader* MxpiImageMask::mutable_headervec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiImageMask.headerVec)
  return headervec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >*
MxpiImageMask::mutable_headervec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiImageMask.headerVec)
  return &headervec_;
}
inline const ::MxTools::MxpiMetaHeader& MxpiImageMask::_internal_headervec(int index) const {
  return headervec_.Get(index);
}
inline const ::MxTools::MxpiMetaHeader& MxpiImageMask::headervec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiImageMask.headerVec)
  return _internal_headervec(index);
}
inline ::MxTools::MxpiMetaHeader* MxpiImageMask::_internal_add_headervec() {
  return headervec_.Add();
}
inline ::MxTools::MxpiMetaHeader* MxpiImageMask::add_headervec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiImageMask.headerVec)
  return _internal_add_headervec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >&
MxpiImageMask::headervec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiImageMask.headerVec)
  return headervec_;
}

// repeated string className = 2;
inline int MxpiImageMask::_internal_classname_size() const {
  return classname_.size();
}
inline int MxpiImageMask::classname_size() const {
  return _internal_classname_size();
}
inline void MxpiImageMask::clear_classname() {
  classname_.Clear();
}
inline std::string* MxpiImageMask::add_classname() {
  // @@protoc_insertion_point(field_add_mutable:MxTools.MxpiImageMask.className)
  return _internal_add_classname();
}
inline const std::string& MxpiImageMask::_internal_classname(int index) const {
  return classname_.Get(index);
}
inline const std::string& MxpiImageMask::classname(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiImageMask.className)
  return _internal_classname(index);
}
inline std::string* MxpiImageMask::mutable_classname(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiImageMask.className)
  return classname_.Mutable(index);
}
inline void MxpiImageMask::set_classname(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:MxTools.MxpiImageMask.className)
  classname_.Mutable(index)->assign(value);
}
inline void MxpiImageMask::set_classname(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:MxTools.MxpiImageMask.className)
  classname_.Mutable(index)->assign(std::move(value));
}
inline void MxpiImageMask::set_classname(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  classname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MxTools.MxpiImageMask.className)
}
inline void MxpiImageMask::set_classname(int index, const char* value, size_t size) {
  classname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MxTools.MxpiImageMask.className)
}
inline std::string* MxpiImageMask::_internal_add_classname() {
  return classname_.Add();
}
inline void MxpiImageMask::add_classname(const std::string& value) {
  classname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MxTools.MxpiImageMask.className)
}
inline void MxpiImageMask::add_classname(std::string&& value) {
  classname_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MxTools.MxpiImageMask.className)
}
inline void MxpiImageMask::add_classname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  classname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MxTools.MxpiImageMask.className)
}
inline void MxpiImageMask::add_classname(const char* value, size_t size) {
  classname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MxTools.MxpiImageMask.className)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MxpiImageMask::classname() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiImageMask.className)
  return classname_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MxpiImageMask::mutable_classname() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiImageMask.className)
  return &classname_;
}

// repeated int32 shape = 3;
inline int MxpiImageMask::_internal_shape_size() const {
  return shape_.size();
}
inline int MxpiImageMask::shape_size() const {
  return _internal_shape_size();
}
inline void MxpiImageMask::clear_shape() {
  shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MxpiImageMask::_internal_shape(int index) const {
  return shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MxpiImageMask::shape(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiImageMask.shape)
  return _internal_shape(index);
}
inline void MxpiImageMask::set_shape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiImageMask.shape)
}
inline void MxpiImageMask::_internal_add_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  shape_.Add(value);
}
inline void MxpiImageMask::add_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_shape(value);
  // @@protoc_insertion_point(field_add:MxTools.MxpiImageMask.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MxpiImageMask::_internal_shape() const {
  return shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MxpiImageMask::shape() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiImageMask.shape)
  return _internal_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MxpiImageMask::_internal_mutable_shape() {
  return &shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MxpiImageMask::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiImageMask.shape)
  return _internal_mutable_shape();
}

// int32 dataType = 4;
inline void MxpiImageMask::clear_datatype() {
  datatype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MxpiImageMask::_internal_datatype() const {
  return datatype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MxpiImageMask::datatype() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiImageMask.dataType)
  return _internal_datatype();
}
inline void MxpiImageMask::_internal_set_datatype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  datatype_ = value;
}
inline void MxpiImageMask::set_datatype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiImageMask.dataType)
}

// bytes dataStr = 5;
inline void MxpiImageMask::clear_datastr() {
  datastr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MxpiImageMask::datastr() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiImageMask.dataStr)
  return _internal_datastr();
}
inline void MxpiImageMask::set_datastr(const std::string& value) {
  _internal_set_datastr(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiImageMask.dataStr)
}
inline std::string* MxpiImageMask::mutable_datastr() {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiImageMask.dataStr)
  return _internal_mutable_datastr();
}
inline const std::string& MxpiImageMask::_internal_datastr() const {
  return datastr_.Get();
}
inline void MxpiImageMask::_internal_set_datastr(const std::string& value) {
  
  datastr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MxpiImageMask::set_datastr(std::string&& value) {
  
  datastr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MxTools.MxpiImageMask.dataStr)
}
inline void MxpiImageMask::set_datastr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datastr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MxTools.MxpiImageMask.dataStr)
}
inline void MxpiImageMask::set_datastr(const void* value,
    size_t size) {
  
  datastr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MxTools.MxpiImageMask.dataStr)
}
inline std::string* MxpiImageMask::_internal_mutable_datastr() {
  
  return datastr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MxpiImageMask::release_datastr() {
  // @@protoc_insertion_point(field_release:MxTools.MxpiImageMask.dataStr)
  return datastr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MxpiImageMask::set_allocated_datastr(std::string* datastr) {
  if (datastr != nullptr) {
    
  } else {
    
  }
  datastr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datastr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiImageMask.dataStr)
}

// -------------------------------------------------------------------

// MxpiClass

// repeated .MxTools.MxpiMetaHeader headerVec = 1;
inline int MxpiClass::_internal_headervec_size() const {
  return headervec_.size();
}
inline int MxpiClass::headervec_size() const {
  return _internal_headervec_size();
}
inline void MxpiClass::clear_headervec() {
  headervec_.Clear();
}
inline ::MxTools::MxpiMetaHeader* MxpiClass::mutable_headervec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiClass.headerVec)
  return headervec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >*
MxpiClass::mutable_headervec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiClass.headerVec)
  return &headervec_;
}
inline const ::MxTools::MxpiMetaHeader& MxpiClass::_internal_headervec(int index) const {
  return headervec_.Get(index);
}
inline const ::MxTools::MxpiMetaHeader& MxpiClass::headervec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiClass.headerVec)
  return _internal_headervec(index);
}
inline ::MxTools::MxpiMetaHeader* MxpiClass::_internal_add_headervec() {
  return headervec_.Add();
}
inline ::MxTools::MxpiMetaHeader* MxpiClass::add_headervec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiClass.headerVec)
  return _internal_add_headervec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >&
MxpiClass::headervec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiClass.headerVec)
  return headervec_;
}

// int32 classId = 2;
inline void MxpiClass::clear_classid() {
  classid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MxpiClass::_internal_classid() const {
  return classid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MxpiClass::classid() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiClass.classId)
  return _internal_classid();
}
inline void MxpiClass::_internal_set_classid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  classid_ = value;
}
inline void MxpiClass::set_classid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_classid(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiClass.classId)
}

// string className = 3;
inline void MxpiClass::clear_classname() {
  classname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MxpiClass::classname() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiClass.className)
  return _internal_classname();
}
inline void MxpiClass::set_classname(const std::string& value) {
  _internal_set_classname(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiClass.className)
}
inline std::string* MxpiClass::mutable_classname() {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiClass.className)
  return _internal_mutable_classname();
}
inline const std::string& MxpiClass::_internal_classname() const {
  return classname_.Get();
}
inline void MxpiClass::_internal_set_classname(const std::string& value) {
  
  classname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MxpiClass::set_classname(std::string&& value) {
  
  classname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MxTools.MxpiClass.className)
}
inline void MxpiClass::set_classname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  classname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MxTools.MxpiClass.className)
}
inline void MxpiClass::set_classname(const char* value,
    size_t size) {
  
  classname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MxTools.MxpiClass.className)
}
inline std::string* MxpiClass::_internal_mutable_classname() {
  
  return classname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MxpiClass::release_classname() {
  // @@protoc_insertion_point(field_release:MxTools.MxpiClass.className)
  return classname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MxpiClass::set_allocated_classname(std::string* classname) {
  if (classname != nullptr) {
    
  } else {
    
  }
  classname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), classname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiClass.className)
}

// float confidence = 4;
inline void MxpiClass::clear_confidence() {
  confidence_ = 0;
}
inline float MxpiClass::_internal_confidence() const {
  return confidence_;
}
inline float MxpiClass::confidence() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiClass.confidence)
  return _internal_confidence();
}
inline void MxpiClass::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void MxpiClass::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiClass.confidence)
}

// -------------------------------------------------------------------

// MxpiClassList

// repeated .MxTools.MxpiClass classVec = 1;
inline int MxpiClassList::_internal_classvec_size() const {
  return classvec_.size();
}
inline int MxpiClassList::classvec_size() const {
  return _internal_classvec_size();
}
inline void MxpiClassList::clear_classvec() {
  classvec_.Clear();
}
inline ::MxTools::MxpiClass* MxpiClassList::mutable_classvec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiClassList.classVec)
  return classvec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiClass >*
MxpiClassList::mutable_classvec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiClassList.classVec)
  return &classvec_;
}
inline const ::MxTools::MxpiClass& MxpiClassList::_internal_classvec(int index) const {
  return classvec_.Get(index);
}
inline const ::MxTools::MxpiClass& MxpiClassList::classvec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiClassList.classVec)
  return _internal_classvec(index);
}
inline ::MxTools::MxpiClass* MxpiClassList::_internal_add_classvec() {
  return classvec_.Add();
}
inline ::MxTools::MxpiClass* MxpiClassList::add_classvec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiClassList.classVec)
  return _internal_add_classvec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiClass >&
MxpiClassList::classvec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiClassList.classVec)
  return classvec_;
}

// -------------------------------------------------------------------

// MxpiAttributeList

// repeated .MxTools.MxpiAttribute attributeVec = 1;
inline int MxpiAttributeList::_internal_attributevec_size() const {
  return attributevec_.size();
}
inline int MxpiAttributeList::attributevec_size() const {
  return _internal_attributevec_size();
}
inline void MxpiAttributeList::clear_attributevec() {
  attributevec_.Clear();
}
inline ::MxTools::MxpiAttribute* MxpiAttributeList::mutable_attributevec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiAttributeList.attributeVec)
  return attributevec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiAttribute >*
MxpiAttributeList::mutable_attributevec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiAttributeList.attributeVec)
  return &attributevec_;
}
inline const ::MxTools::MxpiAttribute& MxpiAttributeList::_internal_attributevec(int index) const {
  return attributevec_.Get(index);
}
inline const ::MxTools::MxpiAttribute& MxpiAttributeList::attributevec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiAttributeList.attributeVec)
  return _internal_attributevec(index);
}
inline ::MxTools::MxpiAttribute* MxpiAttributeList::_internal_add_attributevec() {
  return attributevec_.Add();
}
inline ::MxTools::MxpiAttribute* MxpiAttributeList::add_attributevec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiAttributeList.attributeVec)
  return _internal_add_attributevec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiAttribute >&
MxpiAttributeList::attributevec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiAttributeList.attributeVec)
  return attributevec_;
}

// -------------------------------------------------------------------

// MxpiAttribute

// repeated .MxTools.MxpiMetaHeader headerVec = 1;
inline int MxpiAttribute::_internal_headervec_size() const {
  return headervec_.size();
}
inline int MxpiAttribute::headervec_size() const {
  return _internal_headervec_size();
}
inline void MxpiAttribute::clear_headervec() {
  headervec_.Clear();
}
inline ::MxTools::MxpiMetaHeader* MxpiAttribute::mutable_headervec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiAttribute.headerVec)
  return headervec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >*
MxpiAttribute::mutable_headervec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiAttribute.headerVec)
  return &headervec_;
}
inline const ::MxTools::MxpiMetaHeader& MxpiAttribute::_internal_headervec(int index) const {
  return headervec_.Get(index);
}
inline const ::MxTools::MxpiMetaHeader& MxpiAttribute::headervec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiAttribute.headerVec)
  return _internal_headervec(index);
}
inline ::MxTools::MxpiMetaHeader* MxpiAttribute::_internal_add_headervec() {
  return headervec_.Add();
}
inline ::MxTools::MxpiMetaHeader* MxpiAttribute::add_headervec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiAttribute.headerVec)
  return _internal_add_headervec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >&
MxpiAttribute::headervec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiAttribute.headerVec)
  return headervec_;
}

// int32 attrId = 2;
inline void MxpiAttribute::clear_attrid() {
  attrid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MxpiAttribute::_internal_attrid() const {
  return attrid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MxpiAttribute::attrid() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiAttribute.attrId)
  return _internal_attrid();
}
inline void MxpiAttribute::_internal_set_attrid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  attrid_ = value;
}
inline void MxpiAttribute::set_attrid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_attrid(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiAttribute.attrId)
}

// string attrName = 3;
inline void MxpiAttribute::clear_attrname() {
  attrname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MxpiAttribute::attrname() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiAttribute.attrName)
  return _internal_attrname();
}
inline void MxpiAttribute::set_attrname(const std::string& value) {
  _internal_set_attrname(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiAttribute.attrName)
}
inline std::string* MxpiAttribute::mutable_attrname() {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiAttribute.attrName)
  return _internal_mutable_attrname();
}
inline const std::string& MxpiAttribute::_internal_attrname() const {
  return attrname_.Get();
}
inline void MxpiAttribute::_internal_set_attrname(const std::string& value) {
  
  attrname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MxpiAttribute::set_attrname(std::string&& value) {
  
  attrname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MxTools.MxpiAttribute.attrName)
}
inline void MxpiAttribute::set_attrname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attrname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MxTools.MxpiAttribute.attrName)
}
inline void MxpiAttribute::set_attrname(const char* value,
    size_t size) {
  
  attrname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MxTools.MxpiAttribute.attrName)
}
inline std::string* MxpiAttribute::_internal_mutable_attrname() {
  
  return attrname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MxpiAttribute::release_attrname() {
  // @@protoc_insertion_point(field_release:MxTools.MxpiAttribute.attrName)
  return attrname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MxpiAttribute::set_allocated_attrname(std::string* attrname) {
  if (attrname != nullptr) {
    
  } else {
    
  }
  attrname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attrname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiAttribute.attrName)
}

// string attrValue = 4;
inline void MxpiAttribute::clear_attrvalue() {
  attrvalue_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MxpiAttribute::attrvalue() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiAttribute.attrValue)
  return _internal_attrvalue();
}
inline void MxpiAttribute::set_attrvalue(const std::string& value) {
  _internal_set_attrvalue(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiAttribute.attrValue)
}
inline std::string* MxpiAttribute::mutable_attrvalue() {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiAttribute.attrValue)
  return _internal_mutable_attrvalue();
}
inline const std::string& MxpiAttribute::_internal_attrvalue() const {
  return attrvalue_.Get();
}
inline void MxpiAttribute::_internal_set_attrvalue(const std::string& value) {
  
  attrvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MxpiAttribute::set_attrvalue(std::string&& value) {
  
  attrvalue_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MxTools.MxpiAttribute.attrValue)
}
inline void MxpiAttribute::set_attrvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  attrvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MxTools.MxpiAttribute.attrValue)
}
inline void MxpiAttribute::set_attrvalue(const char* value,
    size_t size) {
  
  attrvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MxTools.MxpiAttribute.attrValue)
}
inline std::string* MxpiAttribute::_internal_mutable_attrvalue() {
  
  return attrvalue_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MxpiAttribute::release_attrvalue() {
  // @@protoc_insertion_point(field_release:MxTools.MxpiAttribute.attrValue)
  return attrvalue_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MxpiAttribute::set_allocated_attrvalue(std::string* attrvalue) {
  if (attrvalue != nullptr) {
    
  } else {
    
  }
  attrvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attrvalue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiAttribute.attrValue)
}

// float confidence = 5;
inline void MxpiAttribute::clear_confidence() {
  confidence_ = 0;
}
inline float MxpiAttribute::_internal_confidence() const {
  return confidence_;
}
inline float MxpiAttribute::confidence() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiAttribute.confidence)
  return _internal_confidence();
}
inline void MxpiAttribute::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void MxpiAttribute::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiAttribute.confidence)
}

// -------------------------------------------------------------------

// MxpiTrackLetList

// repeated .MxTools.MxpiTrackLet trackLetVec = 1;
inline int MxpiTrackLetList::_internal_trackletvec_size() const {
  return trackletvec_.size();
}
inline int MxpiTrackLetList::trackletvec_size() const {
  return _internal_trackletvec_size();
}
inline void MxpiTrackLetList::clear_trackletvec() {
  trackletvec_.Clear();
}
inline ::MxTools::MxpiTrackLet* MxpiTrackLetList::mutable_trackletvec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiTrackLetList.trackLetVec)
  return trackletvec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiTrackLet >*
MxpiTrackLetList::mutable_trackletvec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiTrackLetList.trackLetVec)
  return &trackletvec_;
}
inline const ::MxTools::MxpiTrackLet& MxpiTrackLetList::_internal_trackletvec(int index) const {
  return trackletvec_.Get(index);
}
inline const ::MxTools::MxpiTrackLet& MxpiTrackLetList::trackletvec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTrackLetList.trackLetVec)
  return _internal_trackletvec(index);
}
inline ::MxTools::MxpiTrackLet* MxpiTrackLetList::_internal_add_trackletvec() {
  return trackletvec_.Add();
}
inline ::MxTools::MxpiTrackLet* MxpiTrackLetList::add_trackletvec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiTrackLetList.trackLetVec)
  return _internal_add_trackletvec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiTrackLet >&
MxpiTrackLetList::trackletvec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiTrackLetList.trackLetVec)
  return trackletvec_;
}

// -------------------------------------------------------------------

// MxpiTrackLet

// repeated .MxTools.MxpiMetaHeader headerVec = 1;
inline int MxpiTrackLet::_internal_headervec_size() const {
  return headervec_.size();
}
inline int MxpiTrackLet::headervec_size() const {
  return _internal_headervec_size();
}
inline void MxpiTrackLet::clear_headervec() {
  headervec_.Clear();
}
inline ::MxTools::MxpiMetaHeader* MxpiTrackLet::mutable_headervec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiTrackLet.headerVec)
  return headervec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >*
MxpiTrackLet::mutable_headervec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiTrackLet.headerVec)
  return &headervec_;
}
inline const ::MxTools::MxpiMetaHeader& MxpiTrackLet::_internal_headervec(int index) const {
  return headervec_.Get(index);
}
inline const ::MxTools::MxpiMetaHeader& MxpiTrackLet::headervec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTrackLet.headerVec)
  return _internal_headervec(index);
}
inline ::MxTools::MxpiMetaHeader* MxpiTrackLet::_internal_add_headervec() {
  return headervec_.Add();
}
inline ::MxTools::MxpiMetaHeader* MxpiTrackLet::add_headervec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiTrackLet.headerVec)
  return _internal_add_headervec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >&
MxpiTrackLet::headervec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiTrackLet.headerVec)
  return headervec_;
}

// uint32 trackId = 2;
inline void MxpiTrackLet::clear_trackid() {
  trackid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiTrackLet::_internal_trackid() const {
  return trackid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiTrackLet::trackid() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTrackLet.trackId)
  return _internal_trackid();
}
inline void MxpiTrackLet::_internal_set_trackid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  trackid_ = value;
}
inline void MxpiTrackLet::set_trackid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_trackid(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTrackLet.trackId)
}

// uint32 age = 3;
inline void MxpiTrackLet::clear_age() {
  age_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiTrackLet::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiTrackLet::age() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTrackLet.age)
  return _internal_age();
}
inline void MxpiTrackLet::_internal_set_age(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  age_ = value;
}
inline void MxpiTrackLet::set_age(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTrackLet.age)
}

// uint32 hits = 4;
inline void MxpiTrackLet::clear_hits() {
  hits_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiTrackLet::_internal_hits() const {
  return hits_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiTrackLet::hits() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTrackLet.hits)
  return _internal_hits();
}
inline void MxpiTrackLet::_internal_set_hits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hits_ = value;
}
inline void MxpiTrackLet::set_hits(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hits(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTrackLet.hits)
}

// int32 trackFlag = 5;
inline void MxpiTrackLet::clear_trackflag() {
  trackflag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MxpiTrackLet::_internal_trackflag() const {
  return trackflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MxpiTrackLet::trackflag() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTrackLet.trackFlag)
  return _internal_trackflag();
}
inline void MxpiTrackLet::_internal_set_trackflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  trackflag_ = value;
}
inline void MxpiTrackLet::set_trackflag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_trackflag(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTrackLet.trackFlag)
}

// -------------------------------------------------------------------

// MxpiTensorPackageList

// repeated .MxTools.MxpiTensorPackage tensorPackageVec = 1;
inline int MxpiTensorPackageList::_internal_tensorpackagevec_size() const {
  return tensorpackagevec_.size();
}
inline int MxpiTensorPackageList::tensorpackagevec_size() const {
  return _internal_tensorpackagevec_size();
}
inline void MxpiTensorPackageList::clear_tensorpackagevec() {
  tensorpackagevec_.Clear();
}
inline ::MxTools::MxpiTensorPackage* MxpiTensorPackageList::mutable_tensorpackagevec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiTensorPackageList.tensorPackageVec)
  return tensorpackagevec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiTensorPackage >*
MxpiTensorPackageList::mutable_tensorpackagevec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiTensorPackageList.tensorPackageVec)
  return &tensorpackagevec_;
}
inline const ::MxTools::MxpiTensorPackage& MxpiTensorPackageList::_internal_tensorpackagevec(int index) const {
  return tensorpackagevec_.Get(index);
}
inline const ::MxTools::MxpiTensorPackage& MxpiTensorPackageList::tensorpackagevec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTensorPackageList.tensorPackageVec)
  return _internal_tensorpackagevec(index);
}
inline ::MxTools::MxpiTensorPackage* MxpiTensorPackageList::_internal_add_tensorpackagevec() {
  return tensorpackagevec_.Add();
}
inline ::MxTools::MxpiTensorPackage* MxpiTensorPackageList::add_tensorpackagevec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiTensorPackageList.tensorPackageVec)
  return _internal_add_tensorpackagevec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiTensorPackage >&
MxpiTensorPackageList::tensorpackagevec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiTensorPackageList.tensorPackageVec)
  return tensorpackagevec_;
}

// -------------------------------------------------------------------

// MxpiTensorPackage

// repeated .MxTools.MxpiMetaHeader headerVec = 1;
inline int MxpiTensorPackage::_internal_headervec_size() const {
  return headervec_.size();
}
inline int MxpiTensorPackage::headervec_size() const {
  return _internal_headervec_size();
}
inline void MxpiTensorPackage::clear_headervec() {
  headervec_.Clear();
}
inline ::MxTools::MxpiMetaHeader* MxpiTensorPackage::mutable_headervec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiTensorPackage.headerVec)
  return headervec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >*
MxpiTensorPackage::mutable_headervec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiTensorPackage.headerVec)
  return &headervec_;
}
inline const ::MxTools::MxpiMetaHeader& MxpiTensorPackage::_internal_headervec(int index) const {
  return headervec_.Get(index);
}
inline const ::MxTools::MxpiMetaHeader& MxpiTensorPackage::headervec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTensorPackage.headerVec)
  return _internal_headervec(index);
}
inline ::MxTools::MxpiMetaHeader* MxpiTensorPackage::_internal_add_headervec() {
  return headervec_.Add();
}
inline ::MxTools::MxpiMetaHeader* MxpiTensorPackage::add_headervec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiTensorPackage.headerVec)
  return _internal_add_headervec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >&
MxpiTensorPackage::headervec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiTensorPackage.headerVec)
  return headervec_;
}

// repeated .MxTools.MxpiTensor tensorVec = 2;
inline int MxpiTensorPackage::_internal_tensorvec_size() const {
  return tensorvec_.size();
}
inline int MxpiTensorPackage::tensorvec_size() const {
  return _internal_tensorvec_size();
}
inline void MxpiTensorPackage::clear_tensorvec() {
  tensorvec_.Clear();
}
inline ::MxTools::MxpiTensor* MxpiTensorPackage::mutable_tensorvec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiTensorPackage.tensorVec)
  return tensorvec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiTensor >*
MxpiTensorPackage::mutable_tensorvec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiTensorPackage.tensorVec)
  return &tensorvec_;
}
inline const ::MxTools::MxpiTensor& MxpiTensorPackage::_internal_tensorvec(int index) const {
  return tensorvec_.Get(index);
}
inline const ::MxTools::MxpiTensor& MxpiTensorPackage::tensorvec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTensorPackage.tensorVec)
  return _internal_tensorvec(index);
}
inline ::MxTools::MxpiTensor* MxpiTensorPackage::_internal_add_tensorvec() {
  return tensorvec_.Add();
}
inline ::MxTools::MxpiTensor* MxpiTensorPackage::add_tensorvec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiTensorPackage.tensorVec)
  return _internal_add_tensorvec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiTensor >&
MxpiTensorPackage::tensorvec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiTensorPackage.tensorVec)
  return tensorvec_;
}

// -------------------------------------------------------------------

// MxpiTensor

// uint64 tensorDataPtr = 1;
inline void MxpiTensor::clear_tensordataptr() {
  tensordataptr_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MxpiTensor::_internal_tensordataptr() const {
  return tensordataptr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MxpiTensor::tensordataptr() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTensor.tensorDataPtr)
  return _internal_tensordataptr();
}
inline void MxpiTensor::_internal_set_tensordataptr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tensordataptr_ = value;
}
inline void MxpiTensor::set_tensordataptr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tensordataptr(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTensor.tensorDataPtr)
}

// int32 tensorDataSize = 2;
inline void MxpiTensor::clear_tensordatasize() {
  tensordatasize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MxpiTensor::_internal_tensordatasize() const {
  return tensordatasize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MxpiTensor::tensordatasize() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTensor.tensorDataSize)
  return _internal_tensordatasize();
}
inline void MxpiTensor::_internal_set_tensordatasize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tensordatasize_ = value;
}
inline void MxpiTensor::set_tensordatasize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tensordatasize(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTensor.tensorDataSize)
}

// uint32 deviceId = 3;
inline void MxpiTensor::clear_deviceid() {
  deviceid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiTensor::_internal_deviceid() const {
  return deviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MxpiTensor::deviceid() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTensor.deviceId)
  return _internal_deviceid();
}
inline void MxpiTensor::_internal_set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  deviceid_ = value;
}
inline void MxpiTensor::set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTensor.deviceId)
}

// .MxTools.MxpiMemoryType memType = 4;
inline void MxpiTensor::clear_memtype() {
  memtype_ = 0;
}
inline ::MxTools::MxpiMemoryType MxpiTensor::_internal_memtype() const {
  return static_cast< ::MxTools::MxpiMemoryType >(memtype_);
}
inline ::MxTools::MxpiMemoryType MxpiTensor::memtype() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTensor.memType)
  return _internal_memtype();
}
inline void MxpiTensor::_internal_set_memtype(::MxTools::MxpiMemoryType value) {
  
  memtype_ = value;
}
inline void MxpiTensor::set_memtype(::MxTools::MxpiMemoryType value) {
  _internal_set_memtype(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTensor.memType)
}

// uint64 freeFunc = 5;
inline void MxpiTensor::clear_freefunc() {
  freefunc_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MxpiTensor::_internal_freefunc() const {
  return freefunc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MxpiTensor::freefunc() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTensor.freeFunc)
  return _internal_freefunc();
}
inline void MxpiTensor::_internal_set_freefunc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  freefunc_ = value;
}
inline void MxpiTensor::set_freefunc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_freefunc(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTensor.freeFunc)
}

// repeated int32 tensorShape = 6;
inline int MxpiTensor::_internal_tensorshape_size() const {
  return tensorshape_.size();
}
inline int MxpiTensor::tensorshape_size() const {
  return _internal_tensorshape_size();
}
inline void MxpiTensor::clear_tensorshape() {
  tensorshape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MxpiTensor::_internal_tensorshape(int index) const {
  return tensorshape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MxpiTensor::tensorshape(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTensor.tensorShape)
  return _internal_tensorshape(index);
}
inline void MxpiTensor::set_tensorshape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  tensorshape_.Set(index, value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTensor.tensorShape)
}
inline void MxpiTensor::_internal_add_tensorshape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  tensorshape_.Add(value);
}
inline void MxpiTensor::add_tensorshape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_tensorshape(value);
  // @@protoc_insertion_point(field_add:MxTools.MxpiTensor.tensorShape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MxpiTensor::_internal_tensorshape() const {
  return tensorshape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
MxpiTensor::tensorshape() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiTensor.tensorShape)
  return _internal_tensorshape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MxpiTensor::_internal_mutable_tensorshape() {
  return &tensorshape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
MxpiTensor::mutable_tensorshape() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiTensor.tensorShape)
  return _internal_mutable_tensorshape();
}

// bytes dataStr = 7;
inline void MxpiTensor::clear_datastr() {
  datastr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MxpiTensor::datastr() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTensor.dataStr)
  return _internal_datastr();
}
inline void MxpiTensor::set_datastr(const std::string& value) {
  _internal_set_datastr(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTensor.dataStr)
}
inline std::string* MxpiTensor::mutable_datastr() {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiTensor.dataStr)
  return _internal_mutable_datastr();
}
inline const std::string& MxpiTensor::_internal_datastr() const {
  return datastr_.Get();
}
inline void MxpiTensor::_internal_set_datastr(const std::string& value) {
  
  datastr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MxpiTensor::set_datastr(std::string&& value) {
  
  datastr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MxTools.MxpiTensor.dataStr)
}
inline void MxpiTensor::set_datastr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datastr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MxTools.MxpiTensor.dataStr)
}
inline void MxpiTensor::set_datastr(const void* value,
    size_t size) {
  
  datastr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MxTools.MxpiTensor.dataStr)
}
inline std::string* MxpiTensor::_internal_mutable_datastr() {
  
  return datastr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MxpiTensor::release_datastr() {
  // @@protoc_insertion_point(field_release:MxTools.MxpiTensor.dataStr)
  return datastr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MxpiTensor::set_allocated_datastr(std::string* datastr) {
  if (datastr != nullptr) {
    
  } else {
    
  }
  datastr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datastr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiTensor.dataStr)
}

// int32 tensorDataType = 8;
inline void MxpiTensor::clear_tensordatatype() {
  tensordatatype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MxpiTensor::_internal_tensordatatype() const {
  return tensordatatype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MxpiTensor::tensordatatype() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTensor.tensorDataType)
  return _internal_tensordatatype();
}
inline void MxpiTensor::_internal_set_tensordatatype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  tensordatatype_ = value;
}
inline void MxpiTensor::set_tensordatatype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tensordatatype(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTensor.tensorDataType)
}

// -------------------------------------------------------------------

// MxpiFeatureVectorList

// repeated .MxTools.MxpiFeatureVector featureVec = 1;
inline int MxpiFeatureVectorList::_internal_featurevec_size() const {
  return featurevec_.size();
}
inline int MxpiFeatureVectorList::featurevec_size() const {
  return _internal_featurevec_size();
}
inline void MxpiFeatureVectorList::clear_featurevec() {
  featurevec_.Clear();
}
inline ::MxTools::MxpiFeatureVector* MxpiFeatureVectorList::mutable_featurevec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiFeatureVectorList.featureVec)
  return featurevec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiFeatureVector >*
MxpiFeatureVectorList::mutable_featurevec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiFeatureVectorList.featureVec)
  return &featurevec_;
}
inline const ::MxTools::MxpiFeatureVector& MxpiFeatureVectorList::_internal_featurevec(int index) const {
  return featurevec_.Get(index);
}
inline const ::MxTools::MxpiFeatureVector& MxpiFeatureVectorList::featurevec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiFeatureVectorList.featureVec)
  return _internal_featurevec(index);
}
inline ::MxTools::MxpiFeatureVector* MxpiFeatureVectorList::_internal_add_featurevec() {
  return featurevec_.Add();
}
inline ::MxTools::MxpiFeatureVector* MxpiFeatureVectorList::add_featurevec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiFeatureVectorList.featureVec)
  return _internal_add_featurevec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiFeatureVector >&
MxpiFeatureVectorList::featurevec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiFeatureVectorList.featureVec)
  return featurevec_;
}

// -------------------------------------------------------------------

// MxpiFeatureVector

// repeated .MxTools.MxpiMetaHeader headerVec = 1;
inline int MxpiFeatureVector::_internal_headervec_size() const {
  return headervec_.size();
}
inline int MxpiFeatureVector::headervec_size() const {
  return _internal_headervec_size();
}
inline void MxpiFeatureVector::clear_headervec() {
  headervec_.Clear();
}
inline ::MxTools::MxpiMetaHeader* MxpiFeatureVector::mutable_headervec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiFeatureVector.headerVec)
  return headervec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >*
MxpiFeatureVector::mutable_headervec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiFeatureVector.headerVec)
  return &headervec_;
}
inline const ::MxTools::MxpiMetaHeader& MxpiFeatureVector::_internal_headervec(int index) const {
  return headervec_.Get(index);
}
inline const ::MxTools::MxpiMetaHeader& MxpiFeatureVector::headervec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiFeatureVector.headerVec)
  return _internal_headervec(index);
}
inline ::MxTools::MxpiMetaHeader* MxpiFeatureVector::_internal_add_headervec() {
  return headervec_.Add();
}
inline ::MxTools::MxpiMetaHeader* MxpiFeatureVector::add_headervec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiFeatureVector.headerVec)
  return _internal_add_headervec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >&
MxpiFeatureVector::headervec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiFeatureVector.headerVec)
  return headervec_;
}

// repeated float featureValues = 2;
inline int MxpiFeatureVector::_internal_featurevalues_size() const {
  return featurevalues_.size();
}
inline int MxpiFeatureVector::featurevalues_size() const {
  return _internal_featurevalues_size();
}
inline void MxpiFeatureVector::clear_featurevalues() {
  featurevalues_.Clear();
}
inline float MxpiFeatureVector::_internal_featurevalues(int index) const {
  return featurevalues_.Get(index);
}
inline float MxpiFeatureVector::featurevalues(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiFeatureVector.featureValues)
  return _internal_featurevalues(index);
}
inline void MxpiFeatureVector::set_featurevalues(int index, float value) {
  featurevalues_.Set(index, value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiFeatureVector.featureValues)
}
inline void MxpiFeatureVector::_internal_add_featurevalues(float value) {
  featurevalues_.Add(value);
}
inline void MxpiFeatureVector::add_featurevalues(float value) {
  _internal_add_featurevalues(value);
  // @@protoc_insertion_point(field_add:MxTools.MxpiFeatureVector.featureValues)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MxpiFeatureVector::_internal_featurevalues() const {
  return featurevalues_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MxpiFeatureVector::featurevalues() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiFeatureVector.featureValues)
  return _internal_featurevalues();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MxpiFeatureVector::_internal_mutable_featurevalues() {
  return &featurevalues_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MxpiFeatureVector::mutable_featurevalues() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiFeatureVector.featureValues)
  return _internal_mutable_featurevalues();
}

// -------------------------------------------------------------------

// MxpiPoseList

// repeated .MxTools.MxpiPose poseVec = 1;
inline int MxpiPoseList::_internal_posevec_size() const {
  return posevec_.size();
}
inline int MxpiPoseList::posevec_size() const {
  return _internal_posevec_size();
}
inline void MxpiPoseList::clear_posevec() {
  posevec_.Clear();
}
inline ::MxTools::MxpiPose* MxpiPoseList::mutable_posevec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiPoseList.poseVec)
  return posevec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiPose >*
MxpiPoseList::mutable_posevec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiPoseList.poseVec)
  return &posevec_;
}
inline const ::MxTools::MxpiPose& MxpiPoseList::_internal_posevec(int index) const {
  return posevec_.Get(index);
}
inline const ::MxTools::MxpiPose& MxpiPoseList::posevec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiPoseList.poseVec)
  return _internal_posevec(index);
}
inline ::MxTools::MxpiPose* MxpiPoseList::_internal_add_posevec() {
  return posevec_.Add();
}
inline ::MxTools::MxpiPose* MxpiPoseList::add_posevec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiPoseList.poseVec)
  return _internal_add_posevec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiPose >&
MxpiPoseList::posevec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiPoseList.poseVec)
  return posevec_;
}

// -------------------------------------------------------------------

// MxpiPose

// repeated .MxTools.MxpiMetaHeader headerVec = 1;
inline int MxpiPose::_internal_headervec_size() const {
  return headervec_.size();
}
inline int MxpiPose::headervec_size() const {
  return _internal_headervec_size();
}
inline void MxpiPose::clear_headervec() {
  headervec_.Clear();
}
inline ::MxTools::MxpiMetaHeader* MxpiPose::mutable_headervec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiPose.headerVec)
  return headervec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >*
MxpiPose::mutable_headervec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiPose.headerVec)
  return &headervec_;
}
inline const ::MxTools::MxpiMetaHeader& MxpiPose::_internal_headervec(int index) const {
  return headervec_.Get(index);
}
inline const ::MxTools::MxpiMetaHeader& MxpiPose::headervec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiPose.headerVec)
  return _internal_headervec(index);
}
inline ::MxTools::MxpiMetaHeader* MxpiPose::_internal_add_headervec() {
  return headervec_.Add();
}
inline ::MxTools::MxpiMetaHeader* MxpiPose::add_headervec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiPose.headerVec)
  return _internal_add_headervec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >&
MxpiPose::headervec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiPose.headerVec)
  return headervec_;
}

// repeated .MxTools.MxpiKeyPoint keyPointVec = 2;
inline int MxpiPose::_internal_keypointvec_size() const {
  return keypointvec_.size();
}
inline int MxpiPose::keypointvec_size() const {
  return _internal_keypointvec_size();
}
inline void MxpiPose::clear_keypointvec() {
  keypointvec_.Clear();
}
inline ::MxTools::MxpiKeyPoint* MxpiPose::mutable_keypointvec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiPose.keyPointVec)
  return keypointvec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiKeyPoint >*
MxpiPose::mutable_keypointvec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiPose.keyPointVec)
  return &keypointvec_;
}
inline const ::MxTools::MxpiKeyPoint& MxpiPose::_internal_keypointvec(int index) const {
  return keypointvec_.Get(index);
}
inline const ::MxTools::MxpiKeyPoint& MxpiPose::keypointvec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiPose.keyPointVec)
  return _internal_keypointvec(index);
}
inline ::MxTools::MxpiKeyPoint* MxpiPose::_internal_add_keypointvec() {
  return keypointvec_.Add();
}
inline ::MxTools::MxpiKeyPoint* MxpiPose::add_keypointvec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiPose.keyPointVec)
  return _internal_add_keypointvec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiKeyPoint >&
MxpiPose::keypointvec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiPose.keyPointVec)
  return keypointvec_;
}

// float score = 3;
inline void MxpiPose::clear_score() {
  score_ = 0;
}
inline float MxpiPose::_internal_score() const {
  return score_;
}
inline float MxpiPose::score() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiPose.score)
  return _internal_score();
}
inline void MxpiPose::_internal_set_score(float value) {
  
  score_ = value;
}
inline void MxpiPose::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiPose.score)
}

// -------------------------------------------------------------------

// MxpiKeyPoint

// float x = 1;
inline void MxpiKeyPoint::clear_x() {
  x_ = 0;
}
inline float MxpiKeyPoint::_internal_x() const {
  return x_;
}
inline float MxpiKeyPoint::x() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiKeyPoint.x)
  return _internal_x();
}
inline void MxpiKeyPoint::_internal_set_x(float value) {
  
  x_ = value;
}
inline void MxpiKeyPoint::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiKeyPoint.x)
}

// float y = 2;
inline void MxpiKeyPoint::clear_y() {
  y_ = 0;
}
inline float MxpiKeyPoint::_internal_y() const {
  return y_;
}
inline float MxpiKeyPoint::y() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiKeyPoint.y)
  return _internal_y();
}
inline void MxpiKeyPoint::_internal_set_y(float value) {
  
  y_ = value;
}
inline void MxpiKeyPoint::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiKeyPoint.y)
}

// int32 name = 3;
inline void MxpiKeyPoint::clear_name() {
  name_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MxpiKeyPoint::_internal_name() const {
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MxpiKeyPoint::name() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiKeyPoint.name)
  return _internal_name();
}
inline void MxpiKeyPoint::_internal_set_name(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  name_ = value;
}
inline void MxpiKeyPoint::set_name(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiKeyPoint.name)
}

// float score = 4;
inline void MxpiKeyPoint::clear_score() {
  score_ = 0;
}
inline float MxpiKeyPoint::_internal_score() const {
  return score_;
}
inline float MxpiKeyPoint::score() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiKeyPoint.score)
  return _internal_score();
}
inline void MxpiKeyPoint::_internal_set_score(float value) {
  
  score_ = value;
}
inline void MxpiKeyPoint::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiKeyPoint.score)
}

// -------------------------------------------------------------------

// MxpiKeyPointAndAngleList

// repeated .MxTools.MxpiKeyPointAndAngle keyPointAndAngleVec = 1;
inline int MxpiKeyPointAndAngleList::_internal_keypointandanglevec_size() const {
  return keypointandanglevec_.size();
}
inline int MxpiKeyPointAndAngleList::keypointandanglevec_size() const {
  return _internal_keypointandanglevec_size();
}
inline void MxpiKeyPointAndAngleList::clear_keypointandanglevec() {
  keypointandanglevec_.Clear();
}
inline ::MxTools::MxpiKeyPointAndAngle* MxpiKeyPointAndAngleList::mutable_keypointandanglevec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiKeyPointAndAngleList.keyPointAndAngleVec)
  return keypointandanglevec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiKeyPointAndAngle >*
MxpiKeyPointAndAngleList::mutable_keypointandanglevec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiKeyPointAndAngleList.keyPointAndAngleVec)
  return &keypointandanglevec_;
}
inline const ::MxTools::MxpiKeyPointAndAngle& MxpiKeyPointAndAngleList::_internal_keypointandanglevec(int index) const {
  return keypointandanglevec_.Get(index);
}
inline const ::MxTools::MxpiKeyPointAndAngle& MxpiKeyPointAndAngleList::keypointandanglevec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiKeyPointAndAngleList.keyPointAndAngleVec)
  return _internal_keypointandanglevec(index);
}
inline ::MxTools::MxpiKeyPointAndAngle* MxpiKeyPointAndAngleList::_internal_add_keypointandanglevec() {
  return keypointandanglevec_.Add();
}
inline ::MxTools::MxpiKeyPointAndAngle* MxpiKeyPointAndAngleList::add_keypointandanglevec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiKeyPointAndAngleList.keyPointAndAngleVec)
  return _internal_add_keypointandanglevec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiKeyPointAndAngle >&
MxpiKeyPointAndAngleList::keypointandanglevec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiKeyPointAndAngleList.keyPointAndAngleVec)
  return keypointandanglevec_;
}

// -------------------------------------------------------------------

// MxpiKeyPointAndAngle

// repeated .MxTools.MxpiMetaHeader headerVec = 1;
inline int MxpiKeyPointAndAngle::_internal_headervec_size() const {
  return headervec_.size();
}
inline int MxpiKeyPointAndAngle::headervec_size() const {
  return _internal_headervec_size();
}
inline void MxpiKeyPointAndAngle::clear_headervec() {
  headervec_.Clear();
}
inline ::MxTools::MxpiMetaHeader* MxpiKeyPointAndAngle::mutable_headervec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiKeyPointAndAngle.headerVec)
  return headervec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >*
MxpiKeyPointAndAngle::mutable_headervec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiKeyPointAndAngle.headerVec)
  return &headervec_;
}
inline const ::MxTools::MxpiMetaHeader& MxpiKeyPointAndAngle::_internal_headervec(int index) const {
  return headervec_.Get(index);
}
inline const ::MxTools::MxpiMetaHeader& MxpiKeyPointAndAngle::headervec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiKeyPointAndAngle.headerVec)
  return _internal_headervec(index);
}
inline ::MxTools::MxpiMetaHeader* MxpiKeyPointAndAngle::_internal_add_headervec() {
  return headervec_.Add();
}
inline ::MxTools::MxpiMetaHeader* MxpiKeyPointAndAngle::add_headervec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiKeyPointAndAngle.headerVec)
  return _internal_add_headervec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >&
MxpiKeyPointAndAngle::headervec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiKeyPointAndAngle.headerVec)
  return headervec_;
}

// repeated float keyPointsVec = 2;
inline int MxpiKeyPointAndAngle::_internal_keypointsvec_size() const {
  return keypointsvec_.size();
}
inline int MxpiKeyPointAndAngle::keypointsvec_size() const {
  return _internal_keypointsvec_size();
}
inline void MxpiKeyPointAndAngle::clear_keypointsvec() {
  keypointsvec_.Clear();
}
inline float MxpiKeyPointAndAngle::_internal_keypointsvec(int index) const {
  return keypointsvec_.Get(index);
}
inline float MxpiKeyPointAndAngle::keypointsvec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiKeyPointAndAngle.keyPointsVec)
  return _internal_keypointsvec(index);
}
inline void MxpiKeyPointAndAngle::set_keypointsvec(int index, float value) {
  keypointsvec_.Set(index, value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiKeyPointAndAngle.keyPointsVec)
}
inline void MxpiKeyPointAndAngle::_internal_add_keypointsvec(float value) {
  keypointsvec_.Add(value);
}
inline void MxpiKeyPointAndAngle::add_keypointsvec(float value) {
  _internal_add_keypointsvec(value);
  // @@protoc_insertion_point(field_add:MxTools.MxpiKeyPointAndAngle.keyPointsVec)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MxpiKeyPointAndAngle::_internal_keypointsvec() const {
  return keypointsvec_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MxpiKeyPointAndAngle::keypointsvec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiKeyPointAndAngle.keyPointsVec)
  return _internal_keypointsvec();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MxpiKeyPointAndAngle::_internal_mutable_keypointsvec() {
  return &keypointsvec_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MxpiKeyPointAndAngle::mutable_keypointsvec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiKeyPointAndAngle.keyPointsVec)
  return _internal_mutable_keypointsvec();
}

// float angleYaw = 3;
inline void MxpiKeyPointAndAngle::clear_angleyaw() {
  angleyaw_ = 0;
}
inline float MxpiKeyPointAndAngle::_internal_angleyaw() const {
  return angleyaw_;
}
inline float MxpiKeyPointAndAngle::angleyaw() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiKeyPointAndAngle.angleYaw)
  return _internal_angleyaw();
}
inline void MxpiKeyPointAndAngle::_internal_set_angleyaw(float value) {
  
  angleyaw_ = value;
}
inline void MxpiKeyPointAndAngle::set_angleyaw(float value) {
  _internal_set_angleyaw(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiKeyPointAndAngle.angleYaw)
}

// float anglePitch = 4;
inline void MxpiKeyPointAndAngle::clear_anglepitch() {
  anglepitch_ = 0;
}
inline float MxpiKeyPointAndAngle::_internal_anglepitch() const {
  return anglepitch_;
}
inline float MxpiKeyPointAndAngle::anglepitch() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiKeyPointAndAngle.anglePitch)
  return _internal_anglepitch();
}
inline void MxpiKeyPointAndAngle::_internal_set_anglepitch(float value) {
  
  anglepitch_ = value;
}
inline void MxpiKeyPointAndAngle::set_anglepitch(float value) {
  _internal_set_anglepitch(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiKeyPointAndAngle.anglePitch)
}

// float angleRoll = 5;
inline void MxpiKeyPointAndAngle::clear_angleroll() {
  angleroll_ = 0;
}
inline float MxpiKeyPointAndAngle::_internal_angleroll() const {
  return angleroll_;
}
inline float MxpiKeyPointAndAngle::angleroll() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiKeyPointAndAngle.angleRoll)
  return _internal_angleroll();
}
inline void MxpiKeyPointAndAngle::_internal_set_angleroll(float value) {
  
  angleroll_ = value;
}
inline void MxpiKeyPointAndAngle::set_angleroll(float value) {
  _internal_set_angleroll(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiKeyPointAndAngle.angleRoll)
}

// -------------------------------------------------------------------

// MxpiTextObjectList

// repeated .MxTools.MxpiTextObject objectVec = 1;
inline int MxpiTextObjectList::_internal_objectvec_size() const {
  return objectvec_.size();
}
inline int MxpiTextObjectList::objectvec_size() const {
  return _internal_objectvec_size();
}
inline void MxpiTextObjectList::clear_objectvec() {
  objectvec_.Clear();
}
inline ::MxTools::MxpiTextObject* MxpiTextObjectList::mutable_objectvec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiTextObjectList.objectVec)
  return objectvec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiTextObject >*
MxpiTextObjectList::mutable_objectvec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiTextObjectList.objectVec)
  return &objectvec_;
}
inline const ::MxTools::MxpiTextObject& MxpiTextObjectList::_internal_objectvec(int index) const {
  return objectvec_.Get(index);
}
inline const ::MxTools::MxpiTextObject& MxpiTextObjectList::objectvec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextObjectList.objectVec)
  return _internal_objectvec(index);
}
inline ::MxTools::MxpiTextObject* MxpiTextObjectList::_internal_add_objectvec() {
  return objectvec_.Add();
}
inline ::MxTools::MxpiTextObject* MxpiTextObjectList::add_objectvec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiTextObjectList.objectVec)
  return _internal_add_objectvec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiTextObject >&
MxpiTextObjectList::objectvec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiTextObjectList.objectVec)
  return objectvec_;
}

// -------------------------------------------------------------------

// MxpiTextObject

// repeated .MxTools.MxpiMetaHeader headerVec = 1;
inline int MxpiTextObject::_internal_headervec_size() const {
  return headervec_.size();
}
inline int MxpiTextObject::headervec_size() const {
  return _internal_headervec_size();
}
inline void MxpiTextObject::clear_headervec() {
  headervec_.Clear();
}
inline ::MxTools::MxpiMetaHeader* MxpiTextObject::mutable_headervec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiTextObject.headerVec)
  return headervec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >*
MxpiTextObject::mutable_headervec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiTextObject.headerVec)
  return &headervec_;
}
inline const ::MxTools::MxpiMetaHeader& MxpiTextObject::_internal_headervec(int index) const {
  return headervec_.Get(index);
}
inline const ::MxTools::MxpiMetaHeader& MxpiTextObject::headervec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextObject.headerVec)
  return _internal_headervec(index);
}
inline ::MxTools::MxpiMetaHeader* MxpiTextObject::_internal_add_headervec() {
  return headervec_.Add();
}
inline ::MxTools::MxpiMetaHeader* MxpiTextObject::add_headervec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiTextObject.headerVec)
  return _internal_add_headervec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >&
MxpiTextObject::headervec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiTextObject.headerVec)
  return headervec_;
}

// float x0 = 2;
inline void MxpiTextObject::clear_x0() {
  x0_ = 0;
}
inline float MxpiTextObject::_internal_x0() const {
  return x0_;
}
inline float MxpiTextObject::x0() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextObject.x0)
  return _internal_x0();
}
inline void MxpiTextObject::_internal_set_x0(float value) {
  
  x0_ = value;
}
inline void MxpiTextObject::set_x0(float value) {
  _internal_set_x0(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTextObject.x0)
}

// float y0 = 3;
inline void MxpiTextObject::clear_y0() {
  y0_ = 0;
}
inline float MxpiTextObject::_internal_y0() const {
  return y0_;
}
inline float MxpiTextObject::y0() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextObject.y0)
  return _internal_y0();
}
inline void MxpiTextObject::_internal_set_y0(float value) {
  
  y0_ = value;
}
inline void MxpiTextObject::set_y0(float value) {
  _internal_set_y0(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTextObject.y0)
}

// float x1 = 4;
inline void MxpiTextObject::clear_x1() {
  x1_ = 0;
}
inline float MxpiTextObject::_internal_x1() const {
  return x1_;
}
inline float MxpiTextObject::x1() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextObject.x1)
  return _internal_x1();
}
inline void MxpiTextObject::_internal_set_x1(float value) {
  
  x1_ = value;
}
inline void MxpiTextObject::set_x1(float value) {
  _internal_set_x1(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTextObject.x1)
}

// float y1 = 5;
inline void MxpiTextObject::clear_y1() {
  y1_ = 0;
}
inline float MxpiTextObject::_internal_y1() const {
  return y1_;
}
inline float MxpiTextObject::y1() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextObject.y1)
  return _internal_y1();
}
inline void MxpiTextObject::_internal_set_y1(float value) {
  
  y1_ = value;
}
inline void MxpiTextObject::set_y1(float value) {
  _internal_set_y1(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTextObject.y1)
}

// float x2 = 6;
inline void MxpiTextObject::clear_x2() {
  x2_ = 0;
}
inline float MxpiTextObject::_internal_x2() const {
  return x2_;
}
inline float MxpiTextObject::x2() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextObject.x2)
  return _internal_x2();
}
inline void MxpiTextObject::_internal_set_x2(float value) {
  
  x2_ = value;
}
inline void MxpiTextObject::set_x2(float value) {
  _internal_set_x2(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTextObject.x2)
}

// float y2 = 7;
inline void MxpiTextObject::clear_y2() {
  y2_ = 0;
}
inline float MxpiTextObject::_internal_y2() const {
  return y2_;
}
inline float MxpiTextObject::y2() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextObject.y2)
  return _internal_y2();
}
inline void MxpiTextObject::_internal_set_y2(float value) {
  
  y2_ = value;
}
inline void MxpiTextObject::set_y2(float value) {
  _internal_set_y2(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTextObject.y2)
}

// float x3 = 8;
inline void MxpiTextObject::clear_x3() {
  x3_ = 0;
}
inline float MxpiTextObject::_internal_x3() const {
  return x3_;
}
inline float MxpiTextObject::x3() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextObject.x3)
  return _internal_x3();
}
inline void MxpiTextObject::_internal_set_x3(float value) {
  
  x3_ = value;
}
inline void MxpiTextObject::set_x3(float value) {
  _internal_set_x3(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTextObject.x3)
}

// float y3 = 9;
inline void MxpiTextObject::clear_y3() {
  y3_ = 0;
}
inline float MxpiTextObject::_internal_y3() const {
  return y3_;
}
inline float MxpiTextObject::y3() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextObject.y3)
  return _internal_y3();
}
inline void MxpiTextObject::_internal_set_y3(float value) {
  
  y3_ = value;
}
inline void MxpiTextObject::set_y3(float value) {
  _internal_set_y3(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTextObject.y3)
}

// float confidence = 10;
inline void MxpiTextObject::clear_confidence() {
  confidence_ = 0;
}
inline float MxpiTextObject::_internal_confidence() const {
  return confidence_;
}
inline float MxpiTextObject::confidence() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextObject.confidence)
  return _internal_confidence();
}
inline void MxpiTextObject::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void MxpiTextObject::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTextObject.confidence)
}

// string text = 11;
inline void MxpiTextObject::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MxpiTextObject::text() const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextObject.text)
  return _internal_text();
}
inline void MxpiTextObject::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:MxTools.MxpiTextObject.text)
}
inline std::string* MxpiTextObject::mutable_text() {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiTextObject.text)
  return _internal_mutable_text();
}
inline const std::string& MxpiTextObject::_internal_text() const {
  return text_.Get();
}
inline void MxpiTextObject::_internal_set_text(const std::string& value) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MxpiTextObject::set_text(std::string&& value) {
  
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:MxTools.MxpiTextObject.text)
}
inline void MxpiTextObject::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:MxTools.MxpiTextObject.text)
}
inline void MxpiTextObject::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:MxTools.MxpiTextObject.text)
}
inline std::string* MxpiTextObject::_internal_mutable_text() {
  
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MxpiTextObject::release_text() {
  // @@protoc_insertion_point(field_release:MxTools.MxpiTextObject.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MxpiTextObject::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:MxTools.MxpiTextObject.text)
}

// -------------------------------------------------------------------

// MxpiTextsInfoList

// repeated .MxTools.MxpiTextsInfo textsInfoVec = 1;
inline int MxpiTextsInfoList::_internal_textsinfovec_size() const {
  return textsinfovec_.size();
}
inline int MxpiTextsInfoList::textsinfovec_size() const {
  return _internal_textsinfovec_size();
}
inline void MxpiTextsInfoList::clear_textsinfovec() {
  textsinfovec_.Clear();
}
inline ::MxTools::MxpiTextsInfo* MxpiTextsInfoList::mutable_textsinfovec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiTextsInfoList.textsInfoVec)
  return textsinfovec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiTextsInfo >*
MxpiTextsInfoList::mutable_textsinfovec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiTextsInfoList.textsInfoVec)
  return &textsinfovec_;
}
inline const ::MxTools::MxpiTextsInfo& MxpiTextsInfoList::_internal_textsinfovec(int index) const {
  return textsinfovec_.Get(index);
}
inline const ::MxTools::MxpiTextsInfo& MxpiTextsInfoList::textsinfovec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextsInfoList.textsInfoVec)
  return _internal_textsinfovec(index);
}
inline ::MxTools::MxpiTextsInfo* MxpiTextsInfoList::_internal_add_textsinfovec() {
  return textsinfovec_.Add();
}
inline ::MxTools::MxpiTextsInfo* MxpiTextsInfoList::add_textsinfovec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiTextsInfoList.textsInfoVec)
  return _internal_add_textsinfovec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiTextsInfo >&
MxpiTextsInfoList::textsinfovec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiTextsInfoList.textsInfoVec)
  return textsinfovec_;
}

// -------------------------------------------------------------------

// MxpiTextsInfo

// repeated .MxTools.MxpiMetaHeader headerVec = 1;
inline int MxpiTextsInfo::_internal_headervec_size() const {
  return headervec_.size();
}
inline int MxpiTextsInfo::headervec_size() const {
  return _internal_headervec_size();
}
inline void MxpiTextsInfo::clear_headervec() {
  headervec_.Clear();
}
inline ::MxTools::MxpiMetaHeader* MxpiTextsInfo::mutable_headervec(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiTextsInfo.headerVec)
  return headervec_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >*
MxpiTextsInfo::mutable_headervec() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiTextsInfo.headerVec)
  return &headervec_;
}
inline const ::MxTools::MxpiMetaHeader& MxpiTextsInfo::_internal_headervec(int index) const {
  return headervec_.Get(index);
}
inline const ::MxTools::MxpiMetaHeader& MxpiTextsInfo::headervec(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextsInfo.headerVec)
  return _internal_headervec(index);
}
inline ::MxTools::MxpiMetaHeader* MxpiTextsInfo::_internal_add_headervec() {
  return headervec_.Add();
}
inline ::MxTools::MxpiMetaHeader* MxpiTextsInfo::add_headervec() {
  // @@protoc_insertion_point(field_add:MxTools.MxpiTextsInfo.headerVec)
  return _internal_add_headervec();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MxTools::MxpiMetaHeader >&
MxpiTextsInfo::headervec() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiTextsInfo.headerVec)
  return headervec_;
}

// repeated string text = 2;
inline int MxpiTextsInfo::_internal_text_size() const {
  return text_.size();
}
inline int MxpiTextsInfo::text_size() const {
  return _internal_text_size();
}
inline void MxpiTextsInfo::clear_text() {
  text_.Clear();
}
inline std::string* MxpiTextsInfo::add_text() {
  // @@protoc_insertion_point(field_add_mutable:MxTools.MxpiTextsInfo.text)
  return _internal_add_text();
}
inline const std::string& MxpiTextsInfo::_internal_text(int index) const {
  return text_.Get(index);
}
inline const std::string& MxpiTextsInfo::text(int index) const {
  // @@protoc_insertion_point(field_get:MxTools.MxpiTextsInfo.text)
  return _internal_text(index);
}
inline std::string* MxpiTextsInfo::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:MxTools.MxpiTextsInfo.text)
  return text_.Mutable(index);
}
inline void MxpiTextsInfo::set_text(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:MxTools.MxpiTextsInfo.text)
  text_.Mutable(index)->assign(value);
}
inline void MxpiTextsInfo::set_text(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:MxTools.MxpiTextsInfo.text)
  text_.Mutable(index)->assign(std::move(value));
}
inline void MxpiTextsInfo::set_text(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  text_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MxTools.MxpiTextsInfo.text)
}
inline void MxpiTextsInfo::set_text(int index, const char* value, size_t size) {
  text_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MxTools.MxpiTextsInfo.text)
}
inline std::string* MxpiTextsInfo::_internal_add_text() {
  return text_.Add();
}
inline void MxpiTextsInfo::add_text(const std::string& value) {
  text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MxTools.MxpiTextsInfo.text)
}
inline void MxpiTextsInfo::add_text(std::string&& value) {
  text_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:MxTools.MxpiTextsInfo.text)
}
inline void MxpiTextsInfo::add_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  text_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MxTools.MxpiTextsInfo.text)
}
inline void MxpiTextsInfo::add_text(const char* value, size_t size) {
  text_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MxTools.MxpiTextsInfo.text)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
MxpiTextsInfo::text() const {
  // @@protoc_insertion_point(field_list:MxTools.MxpiTextsInfo.text)
  return text_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
MxpiTextsInfo::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:MxTools.MxpiTextsInfo.text)
  return &text_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace MxTools

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MxTools::MxpiMemoryType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MxTools::MxpiMemoryType>() {
  return ::MxTools::MxpiMemoryType_descriptor();
}
template <> struct is_proto_enum< ::MxTools::MxpiDataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MxTools::MxpiDataType>() {
  return ::MxTools::MxpiDataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MxpiDataType_2eproto
